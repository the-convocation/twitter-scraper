{"version":3,"file":"index.mjs","sources":["../../../src/errors.ts","../../../src/rate-limit.ts","../../../src/platform/platform-interface.ts","../../../src/platform/index.ts","../../../src/requests.ts","../../../src/api.ts","../../../src/auth.ts","../../../src/auth-user.ts","../../../src/api-data.ts","../../../src/profile.ts","../../../src/timeline-async.ts","../../../src/type-util.ts","../../../src/timeline-tweet-util.ts","../../../src/timeline-v2.ts","../../../src/timeline-search.ts","../../../src/search.ts","../../../src/timeline-relationship.ts","../../../src/relationships.ts","../../../src/trends.ts","../../../src/timeline-list.ts","../../../src/tweets.ts","../../../src/direct-messages-async.ts","../../../src/direct-messages.ts","../../../src/scraper.ts"],"sourcesContent":["export class ApiError extends Error {\n  constructor(readonly response: Response, readonly data: any) {\n    super(\n      `Response status: ${response.status} | headers: ${JSON.stringify(\n        headersToString(response.headers),\n      )} | data: ${typeof data === 'string' ? data : JSON.stringify(data)}`,\n    );\n  }\n\n  static async fromResponse(response: Response) {\n    // Try our best to parse the result, but don't bother if we can't\n    let data: string | object | undefined = undefined;\n    try {\n      if (response.headers.get('content-type')?.includes('application/json')) {\n        data = await response.json();\n      } else {\n        data = await response.text();\n      }\n    } catch {\n      try {\n        data = await response.text();\n      } catch {}\n    }\n\n    return new ApiError(response, data);\n  }\n}\n\nfunction headersToString(headers: Headers): string {\n  const result: string[] = [];\n  headers.forEach((value, key) => {\n    result.push(`${key}: ${value}`);\n  });\n  return result.join('\\n');\n}\n\nexport class AuthenticationError extends Error {\n  constructor(message?: string) {\n    super(message || 'Authentication failed');\n    this.name = 'AuthenticationError';\n  }\n}\n\nexport interface TwitterApiErrorPosition {\n  line: number;\n  column: number;\n}\n\nexport interface TwitterApiErrorTraceInfo {\n  trace_id: string;\n}\n\nexport interface TwitterApiErrorExtensions {\n  code?: number;\n  kind?: string;\n  name?: string;\n  source?: string;\n  tracing?: TwitterApiErrorTraceInfo;\n}\n\nexport interface TwitterApiErrorRaw extends TwitterApiErrorExtensions {\n  message?: string;\n  locations?: TwitterApiErrorPosition[];\n  path?: string[];\n  extensions?: TwitterApiErrorExtensions;\n}\n","import { FetchParameters } from './api-types';\nimport { ApiError } from './errors';\nimport debug from 'debug';\n\nconst log = debug('twitter-scraper:rate-limit');\n\n/**\n * Information about a rate-limiting event. Both the request and response\n * information are provided.\n */\nexport interface RateLimitEvent {\n  /** The complete arguments that were passed to the fetch function. */\n  fetchParameters: FetchParameters;\n  /** The failing HTTP response. */\n  response: Response;\n}\n\n/**\n * The public interface for all rate-limiting strategies. Library consumers are\n * welcome to provide their own implementations of this interface in the Scraper\n * constructor options.\n *\n * The {@link RateLimitEvent} object contains both the request and response\n * information associated with the event.\n *\n * @example\n * import { Scraper, RateLimitStrategy } from \"@the-convocation/twitter-scraper\";\n *\n * // A custom rate-limiting implementation that just logs request/response information.\n * class ConsoleLogRateLimitStrategy implements RateLimitStrategy {\n *   async onRateLimit(event: RateLimitEvent): Promise<void> {\n *     console.log(event.fetchParameters, event.response);\n *   }\n * }\n *\n * const scraper = new Scraper({\n *   rateLimitStrategy: new ConsoleLogRateLimitStrategy(),\n * });\n */\nexport interface RateLimitStrategy {\n  /**\n   * Called when the scraper is rate limited.\n   * @param event The event information, including the request and response info.\n   */\n  onRateLimit(event: RateLimitEvent): Promise<void>;\n}\n\n/**\n * A rate-limiting strategy that simply waits for the current rate limit period to expire.\n * This has been known to take up to 13 minutes, in some cases.\n */\nexport class WaitingRateLimitStrategy implements RateLimitStrategy {\n  async onRateLimit({ response: res }: RateLimitEvent): Promise<void> {\n    /*\n      Known headers at this point:\n      - x-rate-limit-limit: Maximum number of requests per time period?\n      - x-rate-limit-reset: UNIX timestamp when the current rate limit will be reset.\n      - x-rate-limit-remaining: Number of requests remaining in current time period?\n      */\n    const xRateLimitLimit = res.headers.get('x-rate-limit-limit');\n    const xRateLimitRemaining = res.headers.get('x-rate-limit-remaining');\n    const xRateLimitReset = res.headers.get('x-rate-limit-reset');\n\n    log(\n      `Rate limit event: limit=${xRateLimitLimit}, remaining=${xRateLimitRemaining}, reset=${xRateLimitReset}`,\n    );\n\n    if (xRateLimitRemaining == '0' && xRateLimitReset) {\n      const currentTime = new Date().valueOf() / 1000;\n      const timeDeltaMs = 1000 * (parseInt(xRateLimitReset) - currentTime);\n\n      // I have seen this block for 800s (~13 *minutes*)\n      await new Promise((resolve) => setTimeout(resolve, timeDeltaMs));\n    }\n  }\n}\n\n/**\n * A rate-limiting strategy that throws an {@link ApiError} when a rate limiting event occurs.\n */\nexport class ErrorRateLimitStrategy implements RateLimitStrategy {\n  async onRateLimit({ response: res }: RateLimitEvent): Promise<void> {\n    throw await ApiError.fromResponse(res);\n  }\n}\n","export interface PlatformExtensions {\n  /**\n   * Randomizes the runtime's TLS ciphers to bypass TLS client fingerprinting, which\n   * hopefully avoids random 404s on some requests.\n   *\n   * **References:**\n   * - https://github.com/imputnet/cobalt/pull/574\n   */\n  randomizeCiphers(): Promise<void>;\n}\n\nexport const genericPlatform = new (class implements PlatformExtensions {\n  randomizeCiphers(): Promise<void> {\n    return Promise.resolve();\n  }\n})();\n","import { PlatformExtensions, genericPlatform } from './platform-interface';\n\nexport * from './platform-interface';\n\ndeclare const PLATFORM_NODE: boolean;\ndeclare const PLATFORM_NODE_JEST: boolean;\n\nexport class Platform implements PlatformExtensions {\n  async randomizeCiphers() {\n    const platform = await Platform.importPlatform();\n    await platform?.randomizeCiphers();\n  }\n\n  private static async importPlatform(): Promise<null | PlatformExtensions> {\n    if (PLATFORM_NODE) {\n      const { platform } = await import('./node/index.js');\n      return platform as PlatformExtensions;\n    } else if (PLATFORM_NODE_JEST) {\n      // Jest gets unhappy when using an await import here, so we just use require instead.\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { platform } = require('./node');\n      return platform as PlatformExtensions;\n    }\n\n    return genericPlatform;\n  }\n}\n","import { Cookie, CookieJar } from 'tough-cookie';\nimport setCookie from 'set-cookie-parser';\nimport type { Headers as HeadersPolyfill } from 'headers-polyfill';\n\n/**\n * Updates a cookie jar with the Set-Cookie headers from the provided Headers instance.\n * @param cookieJar The cookie jar to update.\n * @param headers The response headers to populate the cookie jar with.\n */\nexport async function updateCookieJar(\n  cookieJar: CookieJar,\n  headers: Headers | HeadersPolyfill,\n) {\n  const setCookieHeader = headers.get('set-cookie');\n  if (setCookieHeader) {\n    const cookies = setCookie.splitCookiesString(setCookieHeader);\n    for (const cookie of cookies.map((c) => Cookie.parse(c))) {\n      if (!cookie) continue;\n      await cookieJar.setCookie(\n        cookie,\n        `${cookie.secure ? 'https' : 'http'}://${cookie.domain}${cookie.path}`,\n      );\n    }\n  } else if (typeof document !== 'undefined') {\n    for (const cookie of document.cookie.split(';')) {\n      const hardCookie = Cookie.parse(cookie);\n      if (hardCookie) {\n        await cookieJar.setCookie(hardCookie, document.location.toString());\n      }\n    }\n  }\n}\n","import { FetchParameters } from './api-types';\nimport { TwitterAuth } from './auth';\nimport { ApiError } from './errors';\nimport { Platform, PlatformExtensions } from './platform';\nimport { updateCookieJar } from './requests';\nimport { Headers } from 'headers-polyfill';\nimport debug from 'debug';\n\nconst log = debug('twitter-scraper:api');\n\nexport interface FetchTransformOptions {\n  /**\n   * Transforms the request options before a request is made. This executes after all of the default\n   * parameters have been configured, and is stateless. It is safe to return new request options\n   * objects.\n   * @param args The request options.\n   * @returns The transformed request options.\n   */\n  request: (\n    ...args: FetchParameters\n  ) => FetchParameters | Promise<FetchParameters>;\n\n  /**\n   * Transforms the response after a request completes. This executes immediately after the request\n   * completes, and is stateless. It is safe to return a new response object.\n   * @param response The response object.\n   * @returns The transformed response object.\n   */\n  response: (response: Response) => Response | Promise<Response>;\n}\n\nexport const bearerToken =\n  'AAAAAAAAAAAAAAAAAAAAAFQODgEAAAAAVHTp76lzh3rFzcHbmHVvQxYYpTw%3DckAlMINMjmCwxUcaXbAN4XqJVdgMJaHqNOFgPMK0zN1qLqLQCF';\n\nexport async function jitter(maxMs: number): Promise<void> {\n  const jitter = Math.random() * maxMs;\n  await new Promise((resolve) => setTimeout(resolve, jitter));\n}\n\n/**\n * An API result container.\n */\nexport type RequestApiResult<T> =\n  | { success: true; value: T }\n  | { success: false; err: Error };\n\n/**\n * Used internally to send HTTP requests to the Twitter API.\n * @internal\n * @param url - The URL to send the request to.\n * @param auth - The instance of {@link TwitterAuth} that will be used to authorize this request.\n * @param method - The HTTP method used when sending this request.\n */\nexport async function requestApi<T>(\n  url: string,\n  auth: TwitterAuth,\n  method: 'GET' | 'POST' = 'GET',\n  platform: PlatformExtensions = new Platform(),\n): Promise<RequestApiResult<T>> {\n  log(`Making ${method} request to ${url}`);\n\n  const headers = new Headers();\n  await auth.installTo(headers, url);\n  await platform.randomizeCiphers();\n\n  let res: Response;\n  do {\n    const fetchParameters: FetchParameters = [\n      url,\n      {\n        method,\n        headers,\n        credentials: 'include',\n      },\n    ];\n\n    try {\n      res = await auth.fetch(...fetchParameters);\n    } catch (err) {\n      if (!(err instanceof Error)) {\n        throw err;\n      }\n\n      return {\n        success: false,\n        err: new Error('Failed to perform request.'),\n      };\n    }\n\n    await updateCookieJar(auth.cookieJar(), res.headers);\n\n    if (res.status === 429) {\n      log('Rate limit hit, waiting for retry...');\n      await auth.onRateLimit({\n        fetchParameters: fetchParameters,\n        response: res,\n      });\n    }\n  } while (res.status === 429);\n\n  if (!res.ok) {\n    return {\n      success: false,\n      err: await ApiError.fromResponse(res),\n    };\n  }\n\n  const value: T = await res.json();\n  if (res.headers.get('x-rate-limit-incoming') == '0') {\n    auth.deleteToken();\n    return { success: true, value };\n  } else {\n    return { success: true, value };\n  }\n}\n\n/** @internal */\nexport function addApiFeatures(o: object) {\n  return {\n    ...o,\n    rweb_lists_timeline_redesign_enabled: true,\n    responsive_web_graphql_exclude_directive_enabled: true,\n    verified_phone_label_enabled: false,\n    creator_subscriptions_tweet_preview_api_enabled: true,\n    responsive_web_graphql_timeline_navigation_enabled: true,\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\n    tweetypie_unmention_optimization_enabled: true,\n    responsive_web_edit_tweet_api_enabled: true,\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\n    view_counts_everywhere_api_enabled: true,\n    longform_notetweets_consumption_enabled: true,\n    tweet_awards_web_tipping_enabled: false,\n    freedom_of_speech_not_reach_fetch_enabled: true,\n    standardized_nudges_misinfo: true,\n    longform_notetweets_rich_text_read_enabled: true,\n    responsive_web_enhance_cards_enabled: false,\n    subscriptions_verification_info_enabled: true,\n    subscriptions_verification_info_reason_enabled: true,\n    subscriptions_verification_info_verified_since_enabled: true,\n    super_follow_badge_privacy_enabled: false,\n    super_follow_exclusive_tweet_notifications_enabled: false,\n    super_follow_tweet_api_enabled: false,\n    super_follow_user_api_enabled: false,\n    android_graphql_skip_api_media_color_palette: false,\n    creator_subscriptions_subscription_count_enabled: false,\n    blue_business_profile_image_shape_enabled: false,\n    unified_cards_ad_metadata_container_dynamic_card_content_query_enabled:\n      false,\n  };\n}\n\nexport function addApiParams(\n  params: URLSearchParams,\n  includeTweetReplies: boolean,\n): URLSearchParams {\n  params.set('include_profile_interstitial_type', '1');\n  params.set('include_blocking', '1');\n  params.set('include_blocked_by', '1');\n  params.set('include_followed_by', '1');\n  params.set('include_want_retweets', '1');\n  params.set('include_mute_edge', '1');\n  params.set('include_can_dm', '1');\n  params.set('include_can_media_tag', '1');\n  params.set('include_ext_has_nft_avatar', '1');\n  params.set('include_ext_is_blue_verified', '1');\n  params.set('include_ext_verified_type', '1');\n  params.set('skip_status', '1');\n  params.set('cards_platform', 'Web-12');\n  params.set('include_cards', '1');\n  params.set('include_ext_alt_text', 'true');\n  params.set('include_ext_limited_action_results', 'false');\n  params.set('include_quote_count', 'true');\n  params.set('include_reply_count', '1');\n  params.set('tweet_mode', 'extended');\n  params.set('include_ext_collab_control', 'true');\n  params.set('include_ext_views', 'true');\n  params.set('include_entities', 'true');\n  params.set('include_user_entities', 'true');\n  params.set('include_ext_media_color', 'true');\n  params.set('include_ext_media_availability', 'true');\n  params.set('include_ext_sensitive_media_warning', 'true');\n  params.set('include_ext_trusted_friends_metadata', 'true');\n  params.set('send_error_codes', 'true');\n  params.set('simple_quoted_tweet', 'true');\n  params.set('include_tweet_replies', `${includeTweetReplies}`);\n  params.set(\n    'ext',\n    'mediaStats,highlightedLabel,hasNftAvatar,voiceInfo,birdwatchPivot,enrichments,superFollowMetadata,unmentionInfo,editControl,collab_control,vibe',\n  );\n  return params;\n}\n","import { Cookie, CookieJar, MemoryCookieStore } from 'tough-cookie';\nimport { updateCookieJar } from './requests';\nimport { Headers } from 'headers-polyfill';\nimport fetch from 'cross-fetch';\nimport { FetchTransformOptions } from './api';\nimport {\n  RateLimitEvent,\n  RateLimitStrategy,\n  WaitingRateLimitStrategy,\n} from './rate-limit';\nimport { AuthenticationError } from './errors';\nimport debug from 'debug';\n\nconst log = debug('twitter-scraper:auth');\n\nexport interface TwitterAuthOptions {\n  fetch: typeof fetch;\n  transform: Partial<FetchTransformOptions>;\n  rateLimitStrategy: RateLimitStrategy;\n}\n\nexport interface TwitterAuth {\n  fetch: typeof fetch;\n\n  /**\n   * How to behave when being rate-limited.\n   * @param event The event information.\n   */\n  onRateLimit(event: RateLimitEvent): Promise<void>;\n\n  /**\n   * Returns the current cookie jar.\n   */\n  cookieJar(): CookieJar;\n\n  /**\n   * Returns if a user is logged-in to Twitter through this instance.\n   * @returns `true` if a user is logged-in; otherwise `false`.\n   */\n  isLoggedIn(): Promise<boolean>;\n\n  /**\n   * Logs into a Twitter account.\n   * @param username The username to log in with.\n   * @param password The password to log in with.\n   * @param email The email to log in with, if you have email confirmation enabled.\n   * @param twoFactorSecret The secret to generate two factor authentication tokens with, if you have two factor authentication enabled.\n   */\n  login(\n    username: string,\n    password: string,\n    email?: string,\n    twoFactorSecret?: string,\n  ): Promise<void>;\n\n  /**\n   * Logs out of the current session.\n   */\n  logout(): Promise<void>;\n\n  /**\n   * Deletes the current guest token token.\n   */\n  deleteToken(): void;\n\n  /**\n   * Returns if the authentication state has a token.\n   * @returns `true` if the authentication state has a token; `false` otherwise.\n   */\n  hasToken(): boolean;\n\n  /**\n   * Returns the time that authentication was performed.\n   * @returns The time at which the authentication token was created, or `null` if it hasn't been created yet.\n   */\n  authenticatedAt(): Date | null;\n\n  /**\n   * Installs the authentication information into a headers-like object. If needed, the\n   * authentication token will be updated from the API automatically.\n   * @param headers A Headers instance representing a request's headers.\n   */\n  installTo(headers: Headers, url: string): Promise<void>;\n}\n\n/**\n * Wraps the provided fetch function with transforms.\n * @param fetchFn The fetch function.\n * @param transform The transform options.\n * @returns The input fetch function, wrapped with the provided transforms.\n */\nfunction withTransform(\n  fetchFn: typeof fetch,\n  transform?: Partial<FetchTransformOptions>,\n): typeof fetch {\n  return async (input, init) => {\n    const fetchArgs = (await transform?.request?.(input, init)) ?? [\n      input,\n      init,\n    ];\n    const res = await fetchFn(...fetchArgs);\n    return (await transform?.response?.(res)) ?? res;\n  };\n}\n\n/**\n * A guest authentication token manager. Automatically handles token refreshes.\n */\nexport class TwitterGuestAuth implements TwitterAuth {\n  protected bearerToken: string;\n  protected jar: CookieJar;\n  protected guestToken?: string;\n  protected guestCreatedAt?: Date;\n  protected rateLimitStrategy: RateLimitStrategy;\n\n  fetch: typeof fetch;\n\n  constructor(\n    bearerToken: string,\n    protected readonly options?: Partial<TwitterAuthOptions>,\n  ) {\n    this.fetch = withTransform(options?.fetch ?? fetch, options?.transform);\n    this.rateLimitStrategy =\n      options?.rateLimitStrategy ?? new WaitingRateLimitStrategy();\n    this.bearerToken = bearerToken;\n    this.jar = new CookieJar();\n  }\n\n  async onRateLimit(event: RateLimitEvent): Promise<void> {\n    await this.rateLimitStrategy.onRateLimit(event);\n  }\n\n  cookieJar(): CookieJar {\n    return this.jar;\n  }\n\n  isLoggedIn(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  login(_username: string, _password: string, _email?: string): Promise<void> {\n    return this.updateGuestToken();\n  }\n\n  logout(): Promise<void> {\n    this.deleteToken();\n    this.jar = new CookieJar();\n    return Promise.resolve();\n  }\n\n  deleteToken() {\n    delete this.guestToken;\n    delete this.guestCreatedAt;\n  }\n\n  hasToken(): boolean {\n    return this.guestToken != null;\n  }\n\n  authenticatedAt(): Date | null {\n    if (this.guestCreatedAt == null) {\n      return null;\n    }\n\n    return new Date(this.guestCreatedAt);\n  }\n\n  async installTo(headers: Headers): Promise<void> {\n    if (this.shouldUpdate()) {\n      await this.updateGuestToken();\n    }\n\n    const token = this.guestToken;\n    if (token == null) {\n      throw new AuthenticationError(\n        'Authentication token is null or undefined.',\n      );\n    }\n\n    headers.set('authorization', `Bearer ${this.bearerToken}`);\n    headers.set('x-guest-token', token);\n\n    const cookies = await this.getCookies();\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n    if (xCsrfToken) {\n      headers.set('x-csrf-token', xCsrfToken.value);\n    }\n\n    headers.set('cookie', await this.getCookieString());\n  }\n\n  protected async getCookies(): Promise<Cookie[]> {\n    return this.jar.getCookies(this.getCookieJarUrl());\n  }\n\n  protected async getCookieString(): Promise<string> {\n    const cookies = await this.getCookies();\n    return cookies.map((cookie) => `${cookie.key}=${cookie.value}`).join('; ');\n  }\n\n  protected async removeCookie(key: string): Promise<void> {\n    //@ts-expect-error don't care\n    const store: MemoryCookieStore = this.jar.store;\n    const cookies = await this.jar.getCookies(this.getCookieJarUrl());\n    for (const cookie of cookies) {\n      if (!cookie.domain || !cookie.path) continue;\n      store.removeCookie(cookie.domain, cookie.path, key);\n\n      if (typeof document !== 'undefined') {\n        document.cookie = `${cookie.key}=; Max-Age=0; path=${cookie.path}; domain=${cookie.domain}`;\n      }\n    }\n  }\n\n  private getCookieJarUrl(): string {\n    return typeof document !== 'undefined'\n      ? document.location.toString()\n      : 'https://x.com';\n  }\n\n  /**\n   * Updates the authentication state with a new guest token from the Twitter API.\n   */\n  protected async updateGuestToken() {\n    const guestActivateUrl = 'https://api.x.com/1.1/guest/activate.json';\n\n    const headers = new Headers({\n      Authorization: `Bearer ${this.bearerToken}`,\n      Cookie: await this.getCookieString(),\n    });\n\n    log(`Making POST request to ${guestActivateUrl}`);\n\n    const res = await this.fetch(guestActivateUrl, {\n      method: 'POST',\n      headers: headers,\n      referrerPolicy: 'no-referrer',\n    });\n\n    await updateCookieJar(this.jar, res.headers);\n\n    if (!res.ok) {\n      throw new AuthenticationError(await res.text());\n    }\n\n    const o = await res.json();\n    if (o == null || o['guest_token'] == null) {\n      throw new AuthenticationError('guest_token not found.');\n    }\n\n    const newGuestToken = o['guest_token'];\n    if (typeof newGuestToken !== 'string') {\n      throw new AuthenticationError('guest_token was not a string.');\n    }\n\n    this.guestToken = newGuestToken;\n    this.guestCreatedAt = new Date();\n  }\n\n  /**\n   * Returns if the authentication token needs to be updated or not.\n   * @returns `true` if the token needs to be updated; `false` otherwise.\n   */\n  private shouldUpdate(): boolean {\n    return (\n      !this.hasToken() ||\n      (this.guestCreatedAt != null &&\n        this.guestCreatedAt <\n          new Date(new Date().valueOf() - 3 * 60 * 60 * 1000))\n    );\n  }\n}\n","import { Type, type Static } from '@sinclair/typebox';\nimport { Check } from '@sinclair/typebox/value';\nimport debug from 'debug';\nimport { Headers } from 'headers-polyfill';\nimport * as OTPAuth from 'otpauth';\nimport { CookieJar } from 'tough-cookie';\nimport { requestApi } from './api';\nimport { FetchParameters } from './api-types';\nimport { TwitterAuthOptions, TwitterGuestAuth } from './auth';\nimport { ApiError, AuthenticationError, TwitterApiErrorRaw } from './errors';\nimport { updateCookieJar } from './requests';\n\n// NEW: Lqm1 library for x-client-transaction-id\nimport { ClientTransaction, handleXMigration } from 'x-client-transaction-id';\n\nconst log = debug('twitter-scraper:auth-user');\n\nexport interface TwitterUserAuthFlowInitRequest {\n  flow_name: string;\n  input_flow_data: Record<string, unknown>;\n  subtask_versions: Record<string, number>;\n}\n\nexport interface TwitterUserAuthFlowSubtaskRequest {\n  flow_token: string;\n  subtask_inputs: ({\n    subtask_id: string;\n  } & Record<string, unknown>)[];\n}\n\nexport type TwitterUserAuthFlowRequest =\n  | TwitterUserAuthFlowInitRequest\n  | TwitterUserAuthFlowSubtaskRequest;\n\nexport interface TwitterUserAuthFlowResponse {\n  errors?: TwitterApiErrorRaw[];\n  flow_token?: string;\n  status?: string;\n  subtasks?: TwitterUserAuthSubtask[];\n}\n\ninterface TwitterUserAuthVerifyCredentials {\n  errors?: TwitterApiErrorRaw[];\n}\n\nconst TwitterUserAuthSubtask = Type.Object({\n  subtask_id: Type.String(),\n  enter_text: Type.Optional(Type.Object({})),\n});\ntype TwitterUserAuthSubtask = Static<typeof TwitterUserAuthSubtask>;\n\nexport type FlowTokenResultSuccess = {\n  status: 'success';\n  response: TwitterUserAuthFlowResponse;\n};\n\nexport type FlowTokenResultError = {\n  status: 'error';\n  err: Error;\n};\n\nexport type FlowTokenResult = FlowTokenResultSuccess | FlowTokenResultError;\n\nexport interface TwitterUserAuthCredentials {\n  username: string;\n  password: string;\n  email?: string;\n  twoFactorSecret?: string;\n}\n\n/**\n * The API interface provided to custom subtask handlers for interacting with the Twitter authentication flow.\n * This interface allows handlers to send flow requests and access the current flow token.\n */\nexport interface FlowSubtaskHandlerApi {\n  sendFlowRequest: (\n    request: TwitterUserAuthFlowRequest,\n  ) => Promise<FlowTokenResult>;\n  getFlowToken: () => string;\n}\n\n/**\n * A handler function for processing Twitter authentication flow subtasks.\n */\nexport type FlowSubtaskHandler = (\n  subtaskId: string,\n  previousResponse: TwitterUserAuthFlowResponse,\n  credentials: TwitterUserAuthCredentials,\n  api: FlowSubtaskHandlerApi,\n) => Promise<FlowTokenResult>;\n\n/**\n * A user authentication token manager.\n */\nexport class TwitterUserAuth extends TwitterGuestAuth {\n  private readonly subtaskHandlers: Map<string, FlowSubtaskHandler> = new Map();\n\n  // NEW: cache a ClientTransaction generator instance\n  private clientTxn: ClientTransaction | null = null;\n\n  constructor(bearerToken: string, options?: Partial<TwitterAuthOptions>) {\n    super(bearerToken, options);\n    this.initializeDefaultHandlers();\n  }\n\n  /**\n   * Register a custom subtask handler or override an existing one\n   */\n  registerSubtaskHandler(subtaskId: string, handler: FlowSubtaskHandler): void {\n    this.subtaskHandlers.set(subtaskId, handler);\n  }\n\n  private initializeDefaultHandlers(): void {\n    this.subtaskHandlers.set(\n      'LoginJsInstrumentationSubtask',\n      this.handleJsInstrumentationSubtask.bind(this),\n    );\n    this.subtaskHandlers.set(\n      'LoginEnterUserIdentifierSSO',\n      this.handleEnterUserIdentifierSSO.bind(this),\n    );\n    this.subtaskHandlers.set(\n      'LoginEnterAlternateIdentifierSubtask',\n      this.handleEnterAlternateIdentifierSubtask.bind(this),\n    );\n    this.subtaskHandlers.set(\n      'LoginEnterPassword',\n      this.handleEnterPassword.bind(this),\n    );\n    this.subtaskHandlers.set(\n      'AccountDuplicationCheck',\n      this.handleAccountDuplicationCheck.bind(this),\n    );\n    this.subtaskHandlers.set(\n      'LoginTwoFactorAuthChallenge',\n      this.handleTwoFactorAuthChallenge.bind(this),\n    );\n    this.subtaskHandlers.set('LoginAcid', this.handleAcid.bind(this));\n    this.subtaskHandlers.set(\n      'LoginSuccessSubtask',\n      this.handleSuccessSubtask.bind(this),\n    );\n  }\n\n  async isLoggedIn(): Promise<boolean> {\n    const res = await requestApi<TwitterUserAuthVerifyCredentials>(\n      'https://api.x.com/1.1/account/verify_credentials.json',\n      this,\n    );\n    if (!res.success) {\n      return false;\n    }\n\n    const { value: verify } = res;\n    return verify && !verify.errors?.length;\n  }\n\n  async login(\n    username: string,\n    password: string,\n    email?: string,\n    twoFactorSecret?: string,\n  ): Promise<void> {\n    await this.updateGuestToken();\n\n    const credentials: TwitterUserAuthCredentials = {\n      username,\n      password,\n      email,\n      twoFactorSecret,\n    };\n\n    let next: FlowTokenResult = await this.initLogin();\n    while (next.status === 'success' && next.response.subtasks?.length) {\n      const flowToken = next.response.flow_token;\n      if (flowToken == null) {\n        // Should never happen\n        throw new Error('flow_token not found.');\n      }\n\n      const subtaskId = next.response.subtasks[0].subtask_id;\n      const handler = this.subtaskHandlers.get(subtaskId);\n\n      if (handler) {\n        next = await handler(subtaskId, next.response, credentials, {\n          sendFlowRequest: this.executeFlowTask.bind(this),\n          getFlowToken: () => flowToken,\n        });\n      } else {\n        throw new Error(`Unknown subtask ${subtaskId}`);\n      }\n    }\n    if (next.status === 'error') {\n      throw next.err;\n    }\n  }\n\n  async logout(): Promise<void> {\n    if (!this.hasToken()) {\n      return;\n    }\n\n    try {\n      await requestApi<void>(\n        'https://api.x.com/1.1/account/logout.json',\n        this,\n        'POST',\n      );\n    } catch (error) {\n      // Ignore errors during logout but still clean up state\n      console.warn('Error during logout:', error);\n    } finally {\n      this.deleteToken();\n      this.jar = new CookieJar();\n    }\n  }\n\n  async installCsrfToken(headers: Headers): Promise<void> {\n    const cookies = await this.getCookies();\n    const xCsrfToken = cookies.find((cookie) => cookie.key === 'ct0');\n    if (xCsrfToken) {\n      headers.set('x-csrf-token', xCsrfToken.value);\n    }\n  }\n\n  async installTo(headers: Headers): Promise<void> {\n    headers.set('authorization', `Bearer ${this.bearerToken}`);\n    headers.set('cookie', await this.getCookieString());\n    await this.installCsrfToken(headers);\n  }\n\n  private async initLogin(): Promise<FlowTokenResult> {\n    // Reset certain session-related cookies because Twitter complains sometimes if we don't\n    this.removeCookie('twitter_ads_id=');\n    this.removeCookie('ads_prefs=');\n    this.removeCookie('_twitter_sess=');\n    this.removeCookie('zipbox_forms_auth_token=');\n    this.removeCookie('lang=');\n    this.removeCookie('bouncer_reset_cookie=');\n    this.removeCookie('twid=');\n    this.removeCookie('twitter_ads_idb=');\n    this.removeCookie('email_uid=');\n    this.removeCookie('external_referer=');\n    this.removeCookie('ct0=');\n    this.removeCookie('aa_u=');\n    this.removeCookie('__cf_bm=');\n\n    return await this.executeFlowTask({\n      flow_name: 'login',\n      input_flow_data: {\n        flow_context: {\n          debug_overrides: {},\n          start_location: {\n            location: 'unknown',\n          },\n        },\n      },\n      subtask_versions: {\n        action_list: 2,\n        alert_dialog: 1,\n        app_download_cta: 1,\n        check_logged_in_account: 1,\n        choice_selection: 3,\n        contacts_live_sync_permission_prompt: 0,\n        cta: 7,\n        email_verification: 2,\n        end_flow: 1,\n        enter_date: 1,\n        enter_email: 2,\n        enter_password: 5,\n        enter_phone: 2,\n        enter_recaptcha: 1,\n        enter_text: 5,\n        enter_username: 2,\n        generic_urt: 3,\n        in_app_notification: 1,\n        interest_picker: 3,\n        js_instrumentation: 1,\n        menu_dialog: 1,\n        notifications_permission_prompt: 2,\n        open_account: 2,\n        open_home_timeline: 1,\n        open_link: 1,\n        phone_verification: 4,\n        privacy_options: 1,\n        security_key: 3,\n        select_avatar: 4,\n        select_banner: 2,\n        settings_list: 7,\n        show_code: 1,\n        sign_up: 2,\n        sign_up_review: 4,\n        tweet_selection_urt: 1,\n        update_users: 1,\n        upload_media: 1,\n        user_recommendations_list: 4,\n        user_recommendations_urt: 1,\n        wait_spinner: 3,\n        web_modal: 1,\n      },\n    });\n  }\n\n  private async handleJsInstrumentationSubtask(\n    subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    _credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    return await api.sendFlowRequest({\n      flow_token: api.getFlowToken(),\n      subtask_inputs: [\n        {\n          subtask_id: subtaskId,\n          js_instrumentation: {\n            response: '{}',\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleEnterAlternateIdentifierSubtask(\n    subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    if (!credentials.email) {\n      return {\n        status: 'error',\n        err: new AuthenticationError('Email is required for this subtask'),\n      };\n    }\n    return await this.executeFlowTask({\n      flow_token: api.getFlowToken(),\n      subtask_inputs: [\n        {\n          subtask_id: subtaskId,\n          enter_text: {\n            text: credentials.email,\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleEnterUserIdentifierSSO(\n    subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    return await this.executeFlowTask({\n      flow_token: api.getFlowToken(),\n      subtask_inputs: [\n        {\n          subtask_id: subtaskId,\n          settings_list: {\n            setting_responses: [\n              {\n                key: 'user_identifier',\n                response_data: {\n                  text_data: { result: credentials.username },\n                },\n              },\n            ],\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleEnterPassword(\n    subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    return await this.executeFlowTask({\n      flow_token: api.getFlowToken(),\n      subtask_inputs: [\n        {\n          subtask_id: subtaskId,\n          enter_password: {\n            password: credentials.password,\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleAccountDuplicationCheck(\n    subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    _credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    return await this.executeFlowTask({\n      flow_token: api.getFlowToken(),\n      subtask_inputs: [\n        {\n          subtask_id: subtaskId,\n          check_logged_in_account: {\n            link: 'AccountDuplicationCheck_false',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleTwoFactorAuthChallenge(\n    subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    if (!credentials.twoFactorSecret) {\n      return {\n        status: 'error',\n        err: new AuthenticationError(\n          'Two-factor authentication is required but no secret was provided',\n        ),\n      };\n    }\n\n    const totp = new OTPAuth.TOTP({ secret: credentials.twoFactorSecret });\n    let error: unknown;\n    for (let attempts = 1; attempts < 4; attempts += 1) {\n      try {\n        return await api.sendFlowRequest({\n          flow_token: api.getFlowToken(),\n          subtask_inputs: [\n            {\n              subtask_id: subtaskId,\n              enter_text: {\n                link: 'next_link',\n                text: totp.generate(),\n              },\n            },\n          ],\n        });\n      } catch (err) {\n        error = err;\n        await new Promise((resolve) => setTimeout(resolve, 2000 * attempts));\n      }\n    }\n    throw error;\n  }\n\n  private async handleAcid(\n    subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    if (!credentials.email) {\n      return {\n        status: 'error',\n        err: new AuthenticationError('Email is required for this subtask'),\n      };\n    }\n    return await this.executeFlowTask({\n      flow_token: api.getFlowToken(),\n      subtask_inputs: [\n        {\n          subtask_id: subtaskId,\n          enter_text: {\n            text: credentials.email,\n            link: 'next_link',\n          },\n        },\n      ],\n    });\n  }\n\n  private async handleSuccessSubtask(\n    _subtaskId: string,\n    _prev: TwitterUserAuthFlowResponse,\n    _credentials: TwitterUserAuthCredentials,\n    api: FlowSubtaskHandlerApi,\n  ): Promise<FlowTokenResult> {\n    return await this.executeFlowTask({\n      flow_token: api.getFlowToken(),\n      subtask_inputs: [],\n    });\n  }\n\n  // --------- NEW helpers for headers / detection / transaction id ---------\n\n  /** Optionally provide a valid x-xp-forwarded-for if your app can generate one. */\n  // eslint-disable-next-line class-methods-use-this\n  protected getXpffHeader(): string | undefined {\n    // Example: return this.options?.getXpff?.();\n    return undefined;\n  }\n\n  /** Detect Cloudflare/HTML interstitials quickly. */\n  private async isHtmlIntervention(res: Response): Promise<boolean> {\n    const ct = res.headers.get('content-type') || '';\n    if (ct.includes('text/html')) return true;\n    const peek = await res.clone().text();\n    return (\n      /<title>\\s*Attention Required!\\s*\\|\\s*Cloudflare\\s*<\\/title>/i.test(\n        peek,\n      ) || /<h1[^>]*>\\s*Sorry,\\s*you have been blocked\\s*<\\/h1>/i.test(peek)\n    );\n  }\n\n  /** Ensure we have a ready ClientTransaction generator. */\n  private async ensureClientTxn(): Promise<ClientTransaction> {\n    if (this.clientTxn) return this.clientTxn;\n    // Handles x.com migration & returns a document compatible with generator\n    const doc = await handleXMigration();\n    this.clientTxn = await ClientTransaction.create(doc);\n    return this.clientTxn;\n  }\n\n  /** Generate a valid x-client-transaction-id per request (method + path). */\n  private async makeTransactionId(\n    method: string,\n    path: string,\n  ): Promise<string> {\n    const txn = await this.ensureClientTxn();\n    return txn.generateTransactionId(method.toUpperCase(), path);\n  }\n\n  private async buildOnboardingHeaders(\n    token: string,\n    method: string,\n    path: string,\n  ): Promise<Headers> {\n    const headers = new Headers({\n      authorization: `Bearer ${this.bearerToken}`,\n      cookie: await this.getCookieString(),\n      'content-type': 'application/json',\n      accept: '*/*',\n      'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',\n      // Use a realistic desktop UA (closer to captured traffic)\n      'user-agent':\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36',\n      origin: 'https://x.com',\n      referer: 'https://x.com/',\n      'sec-fetch-mode': 'cors',\n      'sec-fetch-site': 'same-site',\n      'x-guest-token': token,\n      'x-twitter-auth-type': 'OAuth2Client',\n      'x-twitter-active-user': 'yes',\n      'x-twitter-client-language': 'en-GB',\n      // CRITICAL: valid per-request transaction id from Lqm1 lib\n      'x-client-transaction-id': await this.makeTransactionId(method, path),\n    });\n\n    const xpff = this.getXpffHeader();\n    if (xpff) headers.set('x-xp-forwarded-for', xpff);\n\n    await this.installCsrfToken(headers);\n    return headers;\n  }\n\n  // --------- /NEW helpers ---------\n\n  private async executeFlowTask(\n    data: TwitterUserAuthFlowRequest,\n  ): Promise<FlowTokenResult> {\n    let onboardingTaskUrl = 'https://api.x.com/1.1/onboarding/task.json';\n    if ('flow_name' in data) {\n      onboardingTaskUrl = `https://api.x.com/1.1/onboarding/task.json?flow_name=${encodeURIComponent(\n        data.flow_name,\n      )}`;\n    }\n\n    log(`Making POST request to ${onboardingTaskUrl}`);\n\n    const token = this.guestToken;\n    if (token == null) {\n      throw new AuthenticationError(\n        'Authentication token is null or undefined.',\n      );\n    }\n\n    // Generate headers with a valid transaction id for POST + path\n    const { pathname } = new URL(onboardingTaskUrl);\n    const headers = await this.buildOnboardingHeaders(token, 'POST', pathname);\n\n    let res: Response;\n    let attempts = 0;\n\n    do {\n      attempts += 1;\n\n      const fetchParameters: FetchParameters = [\n        onboardingTaskUrl,\n        {\n          // NOTE: run server-side; avoid public CORS proxies\n          method: 'POST',\n          headers,\n          body: JSON.stringify(data),\n        },\n      ];\n\n      try {\n        res = await this.fetch(...fetchParameters);\n      } catch (err) {\n        if (!(err instanceof Error)) {\n          throw err;\n        }\n        return { status: 'error', err };\n      }\n\n      await updateCookieJar(this.jar, res.headers);\n\n      if (res.status === 429) {\n        log('Rate limit hit, waiting before retrying...');\n        await this.onRateLimit({ fetchParameters, response: res });\n        // New transaction id on retry\n        headers.set(\n          'x-client-transaction-id',\n          await this.makeTransactionId('POST', pathname),\n        );\n        continue;\n      }\n\n      // If CF/HTML or 401/403/400, retry once with a fresh transaction id\n      if (\n        (res.status === 403 || res.status === 401 || res.status === 400) &&\n        (await this.isHtmlIntervention(res.clone())) &&\n        attempts < 2\n      ) {\n        log(\n          '403/HTML block detected; regenerating x-client-transaction-id and retrying once.',\n        );\n        headers.set(\n          'x-client-transaction-id',\n          await this.makeTransactionId('POST', pathname),\n        );\n        continue;\n      }\n\n      break;\n    } while (true);\n\n    if (!res.ok) {\n      if (await this.isHtmlIntervention(res.clone())) {\n        return {\n          status: 'error',\n          err: new AuthenticationError(\n            'Blocked by Cloudflare (HTML challenge). Ensure valid x-client-transaction-id and server-side requests.',\n          ),\n        };\n      }\n      return { status: 'error', err: await ApiError.fromResponse(res) };\n    }\n\n    // Guard: sometimes 200 with HTML body\n    if (await this.isHtmlIntervention(res.clone())) {\n      return {\n        status: 'error',\n        err: new AuthenticationError(\n          'Blocked by Cloudflare (HTML challenge). Check headers and environment.',\n        ),\n      };\n    }\n\n    const flow: TwitterUserAuthFlowResponse = await res.json();\n    if (flow?.flow_token == null) {\n      return {\n        status: 'error',\n        err: new AuthenticationError('flow_token not found.'),\n      };\n    }\n\n    if (flow.errors?.length) {\n      return {\n        status: 'error',\n        err: new AuthenticationError(\n          `Authentication error (${flow.errors[0].code}): ${flow.errors[0].message}`,\n        ),\n      };\n    }\n\n    if (typeof flow.flow_token !== 'string') {\n      return {\n        status: 'error',\n        err: new AuthenticationError('flow_token was not a string.'),\n      };\n    }\n\n    const subtask = flow.subtasks?.length ? flow.subtasks[0] : undefined;\n    Check(TwitterUserAuthSubtask, subtask);\n\n    if (subtask && subtask.subtask_id === 'DenyLoginSubtask') {\n      return {\n        status: 'error',\n        err: new AuthenticationError('Authentication error: DenyLoginSubtask'),\n      };\n    }\n\n    return {\n      status: 'success',\n      response: flow,\n    };\n  }\n}\n","import stringify from 'json-stable-stringify';\n\n/**\n * Examples of requests to API endpoints. These are parsed at runtime and used\n * as templates for requests to a particular endpoint. Please ensure these do\n * not contain any information that you do not want published to NPM.\n */\nconst endpoints = {\n  // TODO: Migrate other endpoint URLs here\n  UserTweets:\n    'https://x.com/i/api/graphql/Li2XXGESVev94TzFtntrgA/UserTweets?variables=%7B%22userId%22%3A%221806359170830172162%22%2C%22count%22%3A20%2C%22includePromotedContent%22%3Atrue%2C%22withQuickPromoteEligibilityTweetFields%22%3Atrue%2C%22withVoice%22%3Atrue%7D&features=%7B%22rweb_video_screen_enabled%22%3Afalse%2C%22profile_label_improvements_pcf_label_in_post_enabled%22%3Atrue%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22premium_content_api_read_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_button_fetch_trends_enabled%22%3Afalse%2C%22responsive_web_grok_analyze_post_followups_enabled%22%3Atrue%2C%22responsive_web_jetfuel_frame%22%3Afalse%2C%22responsive_web_grok_share_attachment_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22responsive_web_grok_show_grok_translated_post%22%3Afalse%2C%22responsive_web_grok_analysis_button_from_backend%22%3Atrue%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_grok_image_annotation_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticlePlainText%22%3Afalse%7D',\n  UserTweetsAndReplies:\n    'https://x.com/i/api/graphql/Hk4KlJ-ONjlJsucqR55P7g/UserTweetsAndReplies?variables=%7B%22userId%22%3A%221806359170830172162%22%2C%22count%22%3A20%2C%22includePromotedContent%22%3Atrue%2C%22withCommunity%22%3Atrue%2C%22withVoice%22%3Atrue%7D&features=%7B%22rweb_video_screen_enabled%22%3Afalse%2C%22profile_label_improvements_pcf_label_in_post_enabled%22%3Atrue%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22premium_content_api_read_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_button_fetch_trends_enabled%22%3Afalse%2C%22responsive_web_grok_analyze_post_followups_enabled%22%3Atrue%2C%22responsive_web_jetfuel_frame%22%3Afalse%2C%22responsive_web_grok_share_attachment_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22responsive_web_grok_show_grok_translated_post%22%3Afalse%2C%22responsive_web_grok_analysis_button_from_backend%22%3Atrue%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_grok_image_annotation_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticlePlainText%22%3Afalse%7D',\n  UserLikedTweets:\n    'https://x.com/i/api/graphql/XHTMjDbiTGLQ9cP1em-aqQ/Likes?variables=%7B%22userId%22%3A%222244196397%22%2C%22count%22%3A20%2C%22includePromotedContent%22%3Afalse%2C%22withClientEventToken%22%3Afalse%2C%22withBirdwatchNotes%22%3Afalse%2C%22withVoice%22%3Atrue%7D&features=%7B%22rweb_video_screen_enabled%22%3Afalse%2C%22profile_label_improvements_pcf_label_in_post_enabled%22%3Atrue%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22premium_content_api_read_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_button_fetch_trends_enabled%22%3Afalse%2C%22responsive_web_grok_analyze_post_followups_enabled%22%3Atrue%2C%22responsive_web_jetfuel_frame%22%3Afalse%2C%22responsive_web_grok_share_attachment_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22responsive_web_grok_show_grok_translated_post%22%3Afalse%2C%22responsive_web_grok_analysis_button_from_backend%22%3Atrue%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_grok_image_annotation_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticlePlainText%22%3Afalse%7D',\n  UserByScreenName:\n    'https://x.com/i/api/graphql/xWw45l6nX7DP2FKRyePXSw/UserByScreenName?variables=%7B%22screen_name%22%3A%22geminiapp%22%7D&features=%7B%22hidden_profile_subscriptions_enabled%22%3Atrue%2C%22profile_label_improvements_pcf_label_in_post_enabled%22%3Atrue%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22subscriptions_verification_info_is_identity_verified_enabled%22%3Atrue%2C%22subscriptions_verification_info_verified_since_enabled%22%3Atrue%2C%22highlights_tweets_tab_ui_enabled%22%3Atrue%2C%22responsive_web_twitter_article_notes_tab_enabled%22%3Atrue%2C%22subscriptions_feature_can_gift_premium%22%3Atrue%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%7D&fieldToggles=%7B%22withAuxiliaryUserLabels%22%3Atrue%7D',\n  TweetDetail:\n    'https://x.com/i/api/graphql/u5Tij6ERlSH2LZvCUqallw/TweetDetail?variables=%7B%22focalTweetId%22%3A%221924893675529900467%22%2C%22referrer%22%3A%22profile%22%2C%22with_rux_injections%22%3Afalse%2C%22rankingMode%22%3A%22Relevance%22%2C%22includePromotedContent%22%3Atrue%2C%22withCommunity%22%3Atrue%2C%22withQuickPromoteEligibilityTweetFields%22%3Atrue%2C%22withBirdwatchNotes%22%3Atrue%2C%22withVoice%22%3Atrue%7D&features=%7B%22rweb_video_screen_enabled%22%3Afalse%2C%22profile_label_improvements_pcf_label_in_post_enabled%22%3Atrue%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22premium_content_api_read_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_button_fetch_trends_enabled%22%3Afalse%2C%22responsive_web_grok_analyze_post_followups_enabled%22%3Atrue%2C%22responsive_web_jetfuel_frame%22%3Afalse%2C%22responsive_web_grok_share_attachment_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22responsive_web_grok_show_grok_translated_post%22%3Afalse%2C%22responsive_web_grok_analysis_button_from_backend%22%3Atrue%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_grok_image_annotation_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticleRichContentState%22%3Atrue%2C%22withArticlePlainText%22%3Afalse%2C%22withGrokAnalyze%22%3Afalse%2C%22withDisallowedReplyControls%22%3Afalse%7D',\n  TweetResultByRestId:\n    'https://api.x.com/graphql/Opujkru5iJSDWj4DuJISOw/TweetResultByRestId?variables=%7B%22tweetId%22%3A%221924893675529900467%22%2C%22withCommunity%22%3Afalse%2C%22includePromotedContent%22%3Afalse%2C%22withVoice%22%3Afalse%7D&features=%7B%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22premium_content_api_read_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_button_fetch_trends_enabled%22%3Afalse%2C%22responsive_web_grok_analyze_post_followups_enabled%22%3Afalse%2C%22responsive_web_jetfuel_frame%22%3Afalse%2C%22responsive_web_grok_share_attachment_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22responsive_web_grok_show_grok_translated_post%22%3Afalse%2C%22responsive_web_grok_analysis_button_from_backend%22%3Atrue%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22profile_label_improvements_pcf_label_in_post_enabled%22%3Atrue%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22responsive_web_grok_image_annotation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D&fieldToggles=%7B%22withArticleRichContentState%22%3Atrue%2C%22withArticlePlainText%22%3Afalse%2C%22withGrokAnalyze%22%3Afalse%2C%22withDisallowedReplyControls%22%3Afalse%7D',\n  ListTweets:\n    'https://x.com/i/api/graphql/S1Sm3_mNJwa-fnY9htcaAQ/ListLatestTweetsTimeline?variables=%7B%22listId%22%3A%221736495155002106192%22%2C%22count%22%3A20%7D&features=%7B%22rweb_video_screen_enabled%22%3Afalse%2C%22profile_label_improvements_pcf_label_in_post_enabled%22%3Atrue%2C%22rweb_tipjar_consumption_enabled%22%3Atrue%2C%22verified_phone_label_enabled%22%3Afalse%2C%22creator_subscriptions_tweet_preview_api_enabled%22%3Atrue%2C%22responsive_web_graphql_timeline_navigation_enabled%22%3Atrue%2C%22responsive_web_graphql_skip_user_profile_image_extensions_enabled%22%3Afalse%2C%22premium_content_api_read_enabled%22%3Afalse%2C%22communities_web_enable_tweet_community_results_fetch%22%3Atrue%2C%22c9s_tweet_anatomy_moderator_badge_enabled%22%3Atrue%2C%22responsive_web_grok_analyze_button_fetch_trends_enabled%22%3Afalse%2C%22responsive_web_grok_analyze_post_followups_enabled%22%3Atrue%2C%22responsive_web_jetfuel_frame%22%3Afalse%2C%22responsive_web_grok_share_attachment_enabled%22%3Atrue%2C%22articles_preview_enabled%22%3Atrue%2C%22responsive_web_edit_tweet_api_enabled%22%3Atrue%2C%22graphql_is_translatable_rweb_tweet_is_translatable_enabled%22%3Atrue%2C%22view_counts_everywhere_api_enabled%22%3Atrue%2C%22longform_notetweets_consumption_enabled%22%3Atrue%2C%22responsive_web_twitter_article_tweet_consumption_enabled%22%3Atrue%2C%22tweet_awards_web_tipping_enabled%22%3Afalse%2C%22responsive_web_grok_show_grok_translated_post%22%3Afalse%2C%22responsive_web_grok_analysis_button_from_backend%22%3Atrue%2C%22creator_subscriptions_quote_tweet_preview_enabled%22%3Afalse%2C%22freedom_of_speech_not_reach_fetch_enabled%22%3Atrue%2C%22standardized_nudges_misinfo%22%3Atrue%2C%22tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled%22%3Atrue%2C%22longform_notetweets_rich_text_read_enabled%22%3Atrue%2C%22longform_notetweets_inline_media_enabled%22%3Atrue%2C%22responsive_web_grok_image_annotation_enabled%22%3Atrue%2C%22responsive_web_enhance_cards_enabled%22%3Afalse%7D',\n} as const;\n\nexport interface EndpointFieldInfo {\n  /**\n   * Request variables, used for providing arguments such as user IDs or result counts.\n   */\n  variables: Record<string, unknown>;\n\n  /**\n   * Request features, used for encoding feature flags into the request. These may either be\n   * boolean values or numerically-encoded booleans (1 or 0). It is possible this may change\n   * to include other representations of booleans as Twitter's backend evolves.\n   */\n  features: Record<string, unknown>;\n\n  /**\n   * Request field toggles, used for limiting how returned fields are represented. This is\n   * rarely used.\n   */\n  fieldToggles: Record<string, unknown>;\n}\n\ntype SomePartial<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\ntype EndpointVersion = string;\ntype EndpointName = string;\ntype EncodedVariables = string;\ntype EncodedFeatures = string;\ntype EncodedFieldToggles = string;\n\n// TODO: Set up field-level Intellisense for the QraphQL parameters in these?\ntype BaseUrl =\n  | 'https://twitter.com/i/api/graphql'\n  | 'https://x.com/i/api/graphql'\n  | 'https://api.x.com/graphql';\ntype EndpointFields<EndpointUrl> =\n  EndpointUrl extends `${BaseUrl}/${EndpointVersion}/${EndpointName}?variables=${EncodedVariables}&features=${EncodedFeatures}&fieldToggles=${EncodedFieldToggles}`\n    ? EndpointFieldInfo\n    : EndpointUrl extends `${BaseUrl}/${EndpointVersion}/${EndpointName}?variables=${EncodedVariables}&features=${EncodedFeatures}`\n    ? SomePartial<EndpointFieldInfo, 'fieldToggles'>\n    : EndpointUrl extends `${BaseUrl}/${EndpointVersion}/${EndpointName}?variables=${EncodedVariables}`\n    ? SomePartial<EndpointFieldInfo, 'features' | 'fieldToggles'>\n    : Partial<EndpointFieldInfo>;\n\nexport type ApiRequestInfo<EndpointUrl> = EndpointFields<EndpointUrl> & {\n  /**\n   * The URL, without any GraphQL query parameters.\n   */\n  url: string;\n\n  /**\n   * Converts the request back into a URL to be sent to the Twitter API.\n   */\n  toRequestUrl(): string;\n};\n\n/** Wrapper class for API request information. */\nclass ApiRequest<EndpointUrl> {\n  url: string;\n  variables?: Record<string, unknown> | undefined;\n  features?: Record<string, unknown> | undefined;\n  fieldToggles?: Record<string, unknown> | undefined;\n\n  constructor(info: Omit<ApiRequestInfo<EndpointUrl>, 'toRequestUrl'>) {\n    this.url = info.url;\n    this.variables = info.variables;\n    this.features = info.features;\n    this.fieldToggles = info.fieldToggles;\n  }\n\n  toRequestUrl(): string {\n    const params = new URLSearchParams();\n\n    // Only include query parameters with values\n    if (this.variables) {\n      // Stringify with the query keys in sorted order like the Go package\n      const variablesStr = stringify(this.variables);\n      if (variablesStr) params.set('variables', variablesStr);\n    }\n\n    if (this.features) {\n      const featuresStr = stringify(this.features);\n      if (featuresStr) params.set('features', featuresStr);\n    }\n\n    if (this.fieldToggles) {\n      const fieldTogglesStr = stringify(this.fieldToggles);\n      if (fieldTogglesStr) params.set('fieldToggles', fieldTogglesStr);\n    }\n\n    return `${this.url}?${params.toString()}`;\n  }\n}\n\n/**\n * Parses information from a Twitter API endpoint using an example request\n * URL against that endpoint. This can be used to extract GraphQL parameters\n * in order to easily reuse and/or override them later.\n * @param example An example of the endpoint to analyze.\n * @returns The parsed endpoint information.\n */\nfunction parseEndpointExample<\n  Endpoints,\n  Endpoint extends string & keyof Endpoints,\n>(example: Endpoint): ApiRequestInfo<Endpoints[Endpoint]> {\n  const { protocol, host, pathname, searchParams: query } = new URL(example);\n\n  const base = `${protocol}//${host}${pathname}`;\n  const variables = query.get('variables');\n  const features = query.get('features');\n  const fieldToggles = query.get('fieldToggles');\n\n  return new ApiRequest<Endpoints[Endpoint]>({\n    url: base,\n    variables: variables ? JSON.parse(variables) : undefined,\n    features: features ? JSON.parse(features) : undefined,\n    fieldToggles: fieldToggles ? JSON.parse(fieldToggles) : undefined,\n  } as Omit<ApiRequestInfo<Endpoints[Endpoint]>, 'toRequestUrl'>) as ApiRequestInfo<\n    Endpoints[Endpoint]\n  >;\n}\n\ntype ApiRequestFactory<Endpoints> = {\n  [Endpoint in keyof Endpoints as `create${string &\n    Endpoint}Request`]: () => ApiRequestInfo<Endpoints[Endpoint]>;\n};\n\nfunction createApiRequestFactory<Endpoints extends Record<string, string>>(\n  endpoints: Endpoints,\n): ApiRequestFactory<Endpoints> {\n  type UntypedApiRequestFactory = ApiRequestFactory<Record<string, string>>;\n\n  return Object.entries(endpoints)\n    .map<UntypedApiRequestFactory>(([endpointName, endpointExample]) => {\n      // Create a partial factory for only one endpoint\n      return {\n        [`create${endpointName}Request`]: () => {\n          // Create a new instance on each invocation so that we can safely\n          // mutate requests before sending them off\n          return parseEndpointExample<Endpoints, any>(endpointExample);\n        },\n      };\n    })\n    .reduce((agg, next) => {\n      // Merge all of our factories into one that includes every endpoint\n      return Object.assign(agg, next);\n    }) as ApiRequestFactory<Endpoints>;\n}\n\nexport const apiRequestFactory = createApiRequestFactory(endpoints);\n","import { requestApi, RequestApiResult } from './api';\nimport { apiRequestFactory } from './api-data';\nimport { TwitterAuth } from './auth';\nimport { TwitterApiErrorRaw } from './errors';\n\ntype IndicesTuple = [number, number];\n\nexport interface CoreUserRaw {\n  created_at?: string;\n  name?: string;\n  screen_name?: string;\n}\n\nexport interface UrlEntity {\n  url?: string;\n  expanded_url?: string;\n  display_url?: string;\n  indices?: IndicesTuple;\n}\n\nexport interface LegacyUserRaw {\n  // Core\n  id?: number;\n  id_str?: string;\n  name?: string;\n  screen_name?: string;\n  description?: string;\n  location?: string;\n  url?: string;\n  created_at?: string;\n  protected?: boolean;\n  verified?: boolean;\n\n  // Counts\n  favourites_count?: number;\n  followers_count?: number;\n  friends_count?: number;\n  listed_count?: number;\n  media_count?: number;\n  statuses_count?: number;\n\n  // Extra counts from sample\n  fast_followers_count?: number;\n  normal_followers_count?: number;\n\n  // Entities\n  entities?: {\n    url?: { urls?: UrlEntity[] };\n    description?: { urls?: UrlEntity[] };\n  };\n\n  // Profile visuals/settings\n  profile_banner_url?: string;\n  profile_image_url_https?: string;\n  profile_image_url?: string;\n  profile_background_image_url?: string;\n  profile_background_image_url_https?: string;\n  profile_background_tile?: boolean;\n  profile_background_color?: string;\n  profile_link_color?: string;\n  profile_sidebar_border_color?: string;\n  profile_sidebar_fill_color?: string;\n  profile_text_color?: string;\n  profile_use_background_image?: boolean;\n  default_profile?: boolean;\n  default_profile_image?: boolean;\n  profile_interstitial_type?: string;\n\n  // Feature flags & states\n  geo_enabled?: boolean;\n  has_custom_timelines?: boolean;\n  has_extended_profile?: boolean;\n  can_dm?: boolean;\n  can_secret_dm?: boolean;\n  can_media_tag?: boolean;\n  is_translator?: boolean;\n  is_translation_enabled?: boolean;\n  contributors_enabled?: boolean;\n  following?: boolean;\n  follow_request_sent?: boolean;\n  notifications?: boolean;\n  blocking?: boolean;\n  blocked_by?: boolean;\n  subscribed_by?: boolean;\n  want_retweets?: boolean;\n  business_profile_state?: string;\n  translator_type?: string;\n\n  // Pinned / media\n  pinned_tweet_ids_str?: string[];\n\n  // Safety/sensitivity\n  possibly_sensitive?: boolean;\n\n  // Withholding\n  withheld_in_countries?: string[];\n\n  // Misc legacy (tightened types)\n  utc_offset?: number | null;\n  time_zone?: string | null;\n  lang?: string | null;\n}\n\n/**\n * A parsed profile object.\n */\nexport interface Profile {\n  avatar?: string;\n  banner?: string;\n  biography?: string;\n  birthday?: string;\n  followersCount?: number;\n  followingCount?: number;\n  friendsCount?: number;\n  mediaCount?: number;\n  statusesCount?: number;\n  isPrivate?: boolean;\n  isVerified?: boolean;\n  isBlueVerified?: boolean;\n  joined?: Date;\n  likesCount?: number;\n  listedCount?: number;\n  location?: string;\n  name?: string;\n  pinnedTweetIds?: string[];\n  tweetsCount?: number;\n  url?: string;\n  userId?: string;\n  username?: string;\n  website?: string;\n  canDm?: boolean;\n}\n\nexport interface UserRaw {\n  data: {\n    user: {\n      result: {\n        __typename?: string;\n        message?: string;\n        reason?: string;\n        rest_id?: string;\n        is_blue_verified?: boolean;\n        legacy: LegacyUserRaw;\n        core?: CoreUserRaw;\n        avatar?: {\n          image_url?: string;\n        };\n        location?: {\n          location?: string;\n        };\n      };\n    };\n  };\n  errors?: TwitterApiErrorRaw[];\n}\n\nfunction getAvatarOriginalSizeUrl(avatarUrl: string | undefined) {\n  return avatarUrl ? avatarUrl.replace('_normal', '') : undefined;\n}\n\nexport function parseProfile(\n  legacy: LegacyUserRaw,\n  isBlueVerified?: boolean,\n): Profile {\n  const profile: Profile = {\n    avatar: getAvatarOriginalSizeUrl(legacy.profile_image_url_https),\n    banner: legacy.profile_banner_url,\n    biography: legacy.description,\n    followersCount: legacy.followers_count,\n    followingCount: legacy.friends_count,\n    friendsCount: legacy.friends_count,\n    mediaCount: legacy.media_count,\n    isPrivate: legacy.protected ?? false,\n    isVerified: legacy.verified,\n    likesCount: legacy.favourites_count,\n    listedCount: legacy.listed_count,\n    location: legacy.location,\n    name: legacy.name,\n    pinnedTweetIds: legacy.pinned_tweet_ids_str,\n    tweetsCount: legacy.statuses_count,\n    url: `https://x.com/${legacy.screen_name}`,\n    userId: legacy.id_str,\n    username: legacy.screen_name,\n    isBlueVerified: isBlueVerified ?? false,\n    canDm: legacy.can_dm,\n  };\n\n  if (legacy.created_at != null) {\n    profile.joined = new Date(Date.parse(legacy.created_at));\n  }\n\n  const urls = legacy.entities?.url?.urls;\n  if (urls?.length != null && urls?.length > 0) {\n    profile.website = urls[0].expanded_url;\n  }\n\n  return profile;\n}\n\nexport async function getProfile(\n  username: string,\n  auth: TwitterAuth,\n): Promise<RequestApiResult<Profile>> {\n  const request = apiRequestFactory.createUserByScreenNameRequest();\n  request.variables.screen_name = username;\n  request.variables.withSafetyModeUserFields = true;\n  request.features.hidden_profile_subscriptions_enabled = false; // Auth-restricted\n  request.fieldToggles.withAuxiliaryUserLabels = false;\n\n  const res = await requestApi<UserRaw>(request.toRequestUrl(), auth);\n  if (!res.success) {\n    return res;\n  }\n\n  const { value } = res;\n  const { errors } = value;\n  if (errors != null && errors.length > 0) {\n    return {\n      success: false,\n      err: new Error(errors[0].message),\n    };\n  }\n\n  if (!value.data || !value.data.user || !value.data.user.result) {\n    return {\n      success: false,\n      err: new Error('User not found.'),\n    };\n  }\n  const { result: user } = value.data.user;\n  const { legacy } = user;\n\n  if (user.__typename === 'UserUnavailable' && user?.reason === 'Suspended') {\n    return {\n      success: false,\n      err: new Error('User is suspended.'),\n    };\n  }\n\n  if (user.rest_id == null || user.rest_id.length === 0) {\n    return {\n      success: false,\n      err: new Error('rest_id not found.'),\n    };\n  }\n\n  legacy.id_str = user.rest_id;\n  legacy.screen_name ??= user.core?.screen_name;\n  legacy.profile_image_url_https ??= user.avatar?.image_url;\n  legacy.created_at ??= user.core?.created_at;\n  legacy.location ??= user.location?.location;\n  legacy.name ??= user.core?.name;\n\n  if (legacy.screen_name == null || legacy.screen_name.length === 0) {\n    return {\n      success: false,\n      err: new Error(`User ${username} does not exist or is private.`),\n    };\n  }\n\n  return {\n    success: true,\n    value: parseProfile(legacy, user.is_blue_verified),\n  };\n}\n\nconst idCache = new Map<string, string>();\n\nexport async function getUserIdByScreenName(\n  screenName: string,\n  auth: TwitterAuth,\n): Promise<RequestApiResult<string>> {\n  const cached = idCache.get(screenName);\n  if (cached != null) {\n    return { success: true, value: cached };\n  }\n\n  const profileRes = await getProfile(screenName, auth);\n  if (!profileRes.success) {\n    return profileRes;\n  }\n\n  const profile = profileRes.value;\n  if (profile.userId != null) {\n    idCache.set(screenName, profile.userId);\n\n    return {\n      success: true,\n      value: profile.userId,\n    };\n  }\n\n  return {\n    success: false,\n    err: new Error('User ID is undefined.'),\n  };\n}\n","import { jitter } from './api';\nimport { Profile } from './profile';\nimport { Tweet } from './tweets';\n\nexport interface FetchProfilesResponse {\n  profiles: Profile[];\n  next?: string;\n}\n\nexport type FetchProfiles = (\n  query: string,\n  maxProfiles: number,\n  cursor: string | undefined,\n) => Promise<FetchProfilesResponse>;\n\nexport interface FetchTweetsResponse {\n  tweets: Tweet[];\n  next?: string;\n}\n\nexport type FetchTweets = (\n  query: string,\n  maxTweets: number,\n  cursor: string | undefined,\n) => Promise<FetchTweetsResponse>;\n\nexport async function* getUserTimeline(\n  query: string,\n  maxProfiles: number,\n  fetchFunc: FetchProfiles,\n): AsyncGenerator<Profile, void> {\n  let nProfiles = 0;\n  let cursor: string | undefined = undefined;\n  let consecutiveEmptyBatches = 0;\n  while (nProfiles < maxProfiles) {\n    const batch: FetchProfilesResponse = await fetchFunc(\n      query,\n      maxProfiles,\n      cursor,\n    );\n\n    const { profiles, next } = batch;\n    cursor = next;\n\n    if (profiles.length === 0) {\n      consecutiveEmptyBatches++;\n      if (consecutiveEmptyBatches > 5) break;\n    } else consecutiveEmptyBatches = 0;\n\n    for (const profile of profiles) {\n      if (nProfiles < maxProfiles) yield profile;\n      else break;\n      nProfiles++;\n    }\n\n    if (!next) break;\n\n    await jitter(1000);\n  }\n}\n\nexport async function* getTweetTimeline(\n  query: string,\n  maxTweets: number,\n  fetchFunc: FetchTweets,\n): AsyncGenerator<Tweet, void> {\n  let nTweets = 0;\n  let cursor: string | undefined = undefined;\n  while (nTweets < maxTweets) {\n    const batch: FetchTweetsResponse = await fetchFunc(\n      query,\n      maxTweets,\n      cursor,\n    );\n\n    const { tweets, next } = batch;\n\n    if (tweets.length === 0) {\n      break;\n    }\n\n    for (const tweet of tweets) {\n      if (nTweets < maxTweets) {\n        cursor = next;\n        yield tweet;\n      } else {\n        break;\n      }\n\n      nTweets++;\n    }\n\n    await jitter(1000);\n  }\n}\n","export type NonNullableField<T, K extends keyof T> = {\n  [P in K]-?: T[P];\n} & T;\n\nexport function isFieldDefined<T, K extends keyof T>(key: K) {\n  return function (value: T): value is NonNullableField<T, K> {\n    return isDefined(value[key]);\n  };\n}\n\nexport function isDefined<T>(value: T | null | undefined): value is T {\n  return value != null;\n}\n","import { LegacyTweetRaw, TimelineMediaExtendedRaw } from './timeline-v1';\nimport { Photo, Video } from './tweets';\nimport { isFieldDefined, NonNullableField } from './type-util';\n\nconst reHashtag = /\\B(\\#\\S+\\b)/g;\nconst reCashtag = /\\B(\\$\\S+\\b)/g;\nconst reTwitterUrl = /https:(\\/\\/t\\.co\\/([A-Za-z0-9]|[A-Za-z]){10})/g;\nconst reUsername = /\\B(\\@\\S{1,15}\\b)/g;\n\nexport function parseMediaGroups(media: TimelineMediaExtendedRaw[]): {\n  sensitiveContent?: boolean;\n  photos: Photo[];\n  videos: Video[];\n} {\n  const photos: Photo[] = [];\n  const videos: Video[] = [];\n  let sensitiveContent: boolean | undefined = undefined;\n\n  for (const m of media\n    .filter(isFieldDefined('id_str'))\n    .filter(isFieldDefined('media_url_https'))) {\n    if (m.type === 'photo') {\n      photos.push({\n        id: m.id_str,\n        url: m.media_url_https,\n        alt_text: m.ext_alt_text,\n      });\n    } else if (m.type === 'video') {\n      videos.push(parseVideo(m));\n    } else if (m.type === 'animated_gif') {\n      videos.push(parseGif(m));\n    }\n\n    const sensitive = m.ext_sensitive_media_warning;\n    if (sensitive != null) {\n      sensitiveContent =\n        sensitive.adult_content ||\n        sensitive.graphic_violence ||\n        sensitive.other;\n    }\n  }\n\n  return { sensitiveContent, photos, videos };\n}\n\nfunction parseGif(\n  m: NonNullableField<TimelineMediaExtendedRaw, 'id_str' | 'media_url_https'>,\n): Video {\n  const gif: Video = {\n    id: m.id_str,\n    preview: m.media_url_https,\n  };\n\n  const variants = m.video_info?.variants ?? [];\n\n  const url = variants.find((v) => v.content_type === 'video/mp4')?.url;\n\n  if (url) {\n    gif.preview = url;\n    gif.url = url;\n  }\n\n  return gif;\n}\n\nfunction parseVideo(\n  m: NonNullableField<TimelineMediaExtendedRaw, 'id_str' | 'media_url_https'>,\n): Video {\n  const video: Video = {\n    id: m.id_str,\n    preview: m.media_url_https,\n  };\n\n  let maxBitrate = 0;\n  const variants = m.video_info?.variants ?? [];\n  for (const variant of variants) {\n    const bitrate = variant.bitrate;\n    if (bitrate != null && bitrate > maxBitrate && variant.url != null) {\n      let variantUrl = variant.url;\n      const stringStart = 0;\n      const tagSuffixIdx = variantUrl.indexOf('?tag=10');\n      if (tagSuffixIdx !== -1) {\n        variantUrl = variantUrl.substring(stringStart, tagSuffixIdx + 1);\n      }\n\n      video.url = variantUrl;\n      maxBitrate = bitrate;\n    }\n  }\n\n  return video;\n}\n\nexport function reconstructTweetHtml(\n  tweet: LegacyTweetRaw,\n  photos: Photo[],\n  videos: Video[],\n): string {\n  const media: string[] = [];\n\n  // HTML parsing with regex :)\n  let html = tweet.full_text ?? '';\n\n  html = html.replace(reHashtag, linkHashtagHtml);\n  html = html.replace(reCashtag, linkCashtagHtml);\n  html = html.replace(reUsername, linkUsernameHtml);\n  html = html.replace(reTwitterUrl, unwrapTcoUrlHtml(tweet, media));\n\n  for (const { url } of photos) {\n    if (media.indexOf(url) !== -1) {\n      continue;\n    }\n\n    html += `<br><img src=\"${url}\"/>`;\n  }\n\n  for (const { preview: url } of videos) {\n    if (media.indexOf(url) !== -1) {\n      continue;\n    }\n\n    html += `<br><img src=\"${url}\"/>`;\n  }\n\n  html = html.replace(/\\n/g, '<br>');\n\n  return html;\n}\n\nfunction linkHashtagHtml(hashtag: string) {\n  return `<a href=\"https://x.com/hashtag/${hashtag.replace(\n    '#',\n    '',\n  )}\">${hashtag}</a>`;\n}\n\nfunction linkCashtagHtml(cashtag: string) {\n  return `<a href=\"https://x.com/search?q=%24${cashtag.replace(\n    '$',\n    '',\n  )}\">${cashtag}</a>`;\n}\n\nfunction linkUsernameHtml(username: string) {\n  return `<a href=\"https://x.com/${username.replace('@', '')}\">${username}</a>`;\n}\n\nfunction unwrapTcoUrlHtml(tweet: LegacyTweetRaw, foundedMedia: string[]) {\n  return function (tco: string) {\n    for (const entity of tweet.entities?.urls ?? []) {\n      if (tco === entity.url && entity.expanded_url != null) {\n        return `<a href=\"${entity.expanded_url}\">${tco}</a>`;\n      }\n    }\n\n    for (const entity of tweet.extended_entities?.media ?? []) {\n      if (tco === entity.url && entity.media_url_https != null) {\n        foundedMedia.push(entity.media_url_https);\n        return `<br><a href=\"${tco}\"><img src=\"${entity.media_url_https}\"/></a>`;\n      }\n    }\n\n    return tco;\n  };\n}\n","import { CoreUserRaw, LegacyUserRaw } from './profile';\nimport { parseMediaGroups, reconstructTweetHtml } from './timeline-tweet-util';\nimport {\n  EditControlInitialRaw,\n  LegacyTweetRaw,\n  ParseTweetResult,\n  QueryTweetsResponse,\n  SearchResultRaw,\n  TimelineResultRaw,\n} from './timeline-v1';\nimport { Tweet } from './tweets';\nimport { isFieldDefined } from './type-util';\n\nexport interface TimelineUserResultRaw {\n  rest_id?: string;\n  legacy?: LegacyUserRaw;\n  is_blue_verified?: boolean;\n  avatar?: {\n    image_url?: string;\n  };\n}\n\nexport interface TimelineEntryItemContentRaw {\n  itemType?: string;\n  __typename?: string;\n  tweetDisplayType?: string;\n  tweetResult?: {\n    result?: TimelineResultRaw;\n  };\n  tweet_results?: {\n    result?: TimelineResultRaw;\n  };\n  userDisplayType?: string;\n  user_results?: {\n    result?: TimelineUserResultRaw;\n  };\n}\n\nexport interface TimelineEntryRaw {\n  entryId: string;\n  content?: {\n    entryType?: string;\n    __typename?: string;\n    cursorType?: string;\n    value?: string;\n    items?: {\n      entryId?: string;\n      item?: {\n        content?: TimelineEntryItemContentRaw;\n        itemContent?: SearchEntryItemContentRaw;\n      };\n    }[];\n    itemContent?: TimelineEntryItemContentRaw;\n  };\n}\n\nexport interface SearchEntryItemContentRaw {\n  tweetDisplayType?: string;\n  tweet_results?: {\n    result?: SearchResultRaw;\n  };\n  userDisplayType?: string;\n  user_results?: {\n    result?: TimelineUserResultRaw;\n  };\n}\n\nexport interface SearchEntryRaw {\n  entryId: string;\n  sortIndex: string;\n  content?: {\n    cursorType?: string;\n    entryType?: string;\n    __typename?: string;\n    value?: string;\n    items?: {\n      item?: {\n        content?: SearchEntryItemContentRaw;\n      };\n    }[];\n    itemContent?: SearchEntryItemContentRaw;\n  };\n}\n\nexport interface TimelineInstruction {\n  entries?: TimelineEntryRaw[];\n  entry?: TimelineEntryRaw;\n  type?: string;\n}\n\nexport interface TimelineV2 {\n  data?: {\n    user?: {\n      result?: {\n        __typename?: string;\n        timeline?: {\n          timeline?: {\n            instructions?: TimelineInstruction[];\n          };\n        };\n      };\n    };\n  };\n}\n\nexport interface ThreadedConversation {\n  data?: {\n    threaded_conversation_with_injections_v2?: {\n      instructions?: TimelineInstruction[];\n    };\n  };\n}\n\nfunction getLegacyTweetId(tweet: Readonly<LegacyTweetRaw>): string | undefined {\n  if (tweet.id_str) {\n    return tweet.id_str;\n  }\n\n  return tweet.conversation_id_str;\n}\n\nexport function parseLegacyTweet(\n  coreUser?: Readonly<CoreUserRaw>,\n  user?: Readonly<LegacyUserRaw>,\n  tweet?: Readonly<LegacyTweetRaw>,\n  editControl?: Readonly<EditControlInitialRaw>,\n): ParseTweetResult {\n  if (tweet == null) {\n    return {\n      success: false,\n      err: new Error('Tweet was not found in the timeline object.'),\n    };\n  }\n\n  if (user == null) {\n    return {\n      success: false,\n      err: new Error('User was not found in the timeline object.'),\n    };\n  }\n\n  const tweetId = getLegacyTweetId(tweet);\n  if (!tweetId) {\n    return {\n      success: false,\n      err: new Error('Tweet ID was not found in object.'),\n    };\n  }\n\n  const hashtags = tweet.entities?.hashtags ?? [];\n  const mentions = tweet.entities?.user_mentions ?? [];\n  const media = tweet.extended_entities?.media ?? [];\n  const pinnedTweets = new Set<string | undefined>(\n    user.pinned_tweet_ids_str ?? [],\n  );\n  const urls = tweet.entities?.urls ?? [];\n  const { photos, videos, sensitiveContent } = parseMediaGroups(media);\n\n  // The edit tweets array always contains the original tweet, even if it has not been edited\n  const tweetVersions = editControl?.edit_tweet_ids ?? [tweetId];\n\n  const name = user.name ?? coreUser?.name;\n  const username = user.screen_name ?? coreUser?.screen_name;\n  const tw: Tweet = {\n    __raw_UNSTABLE: tweet,\n    bookmarkCount: tweet.bookmark_count,\n    conversationId: tweet.conversation_id_str,\n    id: tweetId,\n    hashtags: hashtags\n      .filter(isFieldDefined('text'))\n      .map((hashtag) => hashtag.text),\n    likes: tweet.favorite_count,\n    mentions: mentions.filter(isFieldDefined('id_str')).map((mention) => ({\n      id: mention.id_str,\n      username: mention.screen_name,\n      name: mention.name,\n    })),\n    name: name,\n    permanentUrl: `https://x.com/${username}/status/${tweetId}`,\n    photos,\n    replies: tweet.reply_count,\n    retweets: tweet.retweet_count,\n    text: tweet.full_text,\n    thread: [],\n    urls: urls\n      .filter(isFieldDefined('expanded_url'))\n      .map((url) => url.expanded_url),\n    userId: tweet.user_id_str,\n    username: username,\n    videos,\n    isQuoted: false,\n    isReply: false,\n    isEdited: tweetVersions.length > 1,\n    versions: tweetVersions,\n    isRetweet: false,\n    isPin: false,\n    sensitiveContent: false,\n    userProfile: {\n      profileImageUrlHttps: user.profile_image_url_https,\n      profileBannerUrl: user.profile_banner_url,\n      createdAt: user.created_at,\n      favouritesCount: user.favourites_count,\n      followersCount: user.followers_count,\n      friendsCount: user.friends_count,\n      listedCount: user.listed_count,\n      mediaCount: user.media_count,\n      statusesCount: user.statuses_count,\n    },\n  };\n\n  if (tweet.created_at) {\n    tw.timeParsed = new Date(Date.parse(tweet.created_at));\n    tw.timestamp = Math.floor(tw.timeParsed.valueOf() / 1000);\n  }\n\n  if (tweet.place?.id) {\n    tw.place = tweet.place;\n  }\n\n  const quotedStatusIdStr = tweet.quoted_status_id_str;\n  const inReplyToStatusIdStr = tweet.in_reply_to_status_id_str;\n  const retweetedStatusIdStr = tweet.retweeted_status_id_str;\n  const retweetedStatusResult = tweet.retweeted_status_result?.result;\n\n  if (quotedStatusIdStr) {\n    tw.isQuoted = true;\n    tw.quotedStatusId = quotedStatusIdStr;\n  }\n\n  if (inReplyToStatusIdStr) {\n    tw.isReply = true;\n    tw.inReplyToStatusId = inReplyToStatusIdStr;\n  }\n\n  if (retweetedStatusIdStr || retweetedStatusResult) {\n    tw.isRetweet = true;\n    tw.retweetedStatusId = retweetedStatusIdStr;\n\n    if (retweetedStatusResult) {\n      const parsedResult = parseLegacyTweet(\n        retweetedStatusResult?.core?.user_results?.result?.core,\n        retweetedStatusResult?.core?.user_results?.result?.legacy,\n        retweetedStatusResult?.legacy,\n        retweetedStatusResult?.edit_control?.edit_control_initial,\n      );\n\n      if (parsedResult.success) {\n        tw.retweetedStatus = parsedResult.tweet;\n      }\n    }\n  }\n\n  const views = parseInt(tweet.ext_views?.count ?? '');\n  if (!isNaN(views)) {\n    tw.views = views;\n  }\n\n  if (pinnedTweets.has(tweetId)) {\n    // TODO: Update tests so this can be assigned at the tweet declaration\n    tw.isPin = true;\n  }\n\n  if (sensitiveContent) {\n    // TODO: Update tests so this can be assigned at the tweet declaration\n    tw.sensitiveContent = true;\n  }\n\n  tw.html = reconstructTweetHtml(tweet, tw.photos, tw.videos);\n\n  return { success: true, tweet: tw };\n}\n\nfunction parseResult(result?: TimelineResultRaw): ParseTweetResult {\n  const noteTweetResultText =\n    result?.note_tweet?.note_tweet_results?.result?.text;\n\n  if (result?.legacy && noteTweetResultText) {\n    result.legacy.full_text = noteTweetResultText;\n  }\n\n  const tweetResult = parseLegacyTweet(\n    result?.core?.user_results?.result?.core,\n    result?.core?.user_results?.result?.legacy,\n    result?.legacy,\n    result?.edit_control?.edit_control_initial,\n  );\n  if (!tweetResult.success) {\n    return tweetResult;\n  }\n\n  if (!tweetResult.tweet.views && result?.views?.count) {\n    const views = parseInt(result.views.count);\n    if (!isNaN(views)) {\n      tweetResult.tweet.views = views;\n    }\n  }\n\n  const quotedResult = result?.quoted_status_result?.result;\n  if (quotedResult) {\n    if (quotedResult.legacy && quotedResult.rest_id) {\n      quotedResult.legacy.id_str = quotedResult.rest_id;\n    }\n\n    const quotedTweetResult = parseResult(quotedResult);\n    if (quotedTweetResult.success) {\n      tweetResult.tweet.quotedStatus = quotedTweetResult.tweet;\n    }\n  }\n\n  return tweetResult;\n}\n\nconst expectedEntryTypes = ['tweet', 'profile-conversation'];\n\nfunction getTimelineInstructionEntries(\n  instruction: TimelineInstruction,\n): TimelineEntryRaw[] {\n  const entries = instruction.entries ?? [];\n  if (instruction.entry) {\n    entries.push(instruction.entry);\n  }\n  return entries;\n}\n\nexport function parseTimelineTweetsV2(\n  timeline: TimelineV2,\n): QueryTweetsResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const tweets: Tweet[] = [];\n  const instructions =\n    timeline.data?.user?.result?.timeline?.timeline?.instructions ?? [];\n  for (const instruction of instructions) {\n    const entries = getTimelineInstructionEntries(instruction);\n    for (const entry of entries) {\n      const entryContent = entry.content;\n      if (!entryContent) continue;\n\n      // Handle pagination\n      if (entryContent.cursorType === 'Bottom') {\n        bottomCursor = entryContent.value;\n        continue;\n      } else if (entryContent.cursorType === 'Top') {\n        topCursor = entryContent.value;\n        continue;\n      }\n\n      const idStr = entry.entryId;\n      if (\n        !expectedEntryTypes.some((entryType) => idStr.startsWith(entryType))\n      ) {\n        continue;\n      }\n\n      if (entryContent.itemContent) {\n        // Typically TimelineTimelineTweet entries\n        parseAndPush(tweets, entryContent.itemContent, idStr);\n      } else if (entryContent.items) {\n        // Typically TimelineTimelineModule entries\n        for (const item of entryContent.items) {\n          if (item.item?.itemContent) {\n            parseAndPush(tweets, item.item.itemContent, idStr);\n          }\n        }\n      }\n    }\n  }\n\n  return { tweets, next: bottomCursor, previous: topCursor };\n}\n\nexport function parseTimelineEntryItemContentRaw(\n  content: TimelineEntryItemContentRaw,\n  entryId: string,\n  isConversation = false,\n) {\n  let result = content.tweet_results?.result ?? content.tweetResult?.result;\n  if (\n    result?.__typename === 'Tweet' ||\n    (result?.__typename === 'TweetWithVisibilityResults' && result?.tweet)\n  ) {\n    if (result?.__typename === 'TweetWithVisibilityResults')\n      result = result.tweet;\n\n    if (result?.legacy) {\n      result.legacy.id_str =\n        result.rest_id ??\n        entryId.replace('conversation-', '').replace('tweet-', '');\n    }\n\n    const tweetResult = parseResult(result);\n    if (tweetResult.success) {\n      if (isConversation) {\n        if (content?.tweetDisplayType === 'SelfThread') {\n          tweetResult.tweet.isSelfThread = true;\n        }\n      }\n\n      return tweetResult.tweet;\n    }\n  }\n\n  return null;\n}\n\nexport function parseAndPush(\n  tweets: Tweet[],\n  content: TimelineEntryItemContentRaw,\n  entryId: string,\n  isConversation = false,\n) {\n  const tweet = parseTimelineEntryItemContentRaw(\n    content,\n    entryId,\n    isConversation,\n  );\n\n  if (tweet) {\n    tweets.push(tweet);\n  }\n}\n\nexport function parseThreadedConversation(\n  conversation: ThreadedConversation,\n): Tweet[] {\n  const tweets: Tweet[] = [];\n  const instructions =\n    conversation.data?.threaded_conversation_with_injections_v2?.instructions ??\n    [];\n\n  for (const instruction of instructions) {\n    const entries = getTimelineInstructionEntries(instruction);\n    for (const entry of entries) {\n      const entryContent = entry.content?.itemContent;\n      if (entryContent) {\n        parseAndPush(tweets, entryContent, entry.entryId, true);\n      }\n\n      for (const item of entry.content?.items ?? []) {\n        const itemContent = item.item?.itemContent;\n        if (itemContent) {\n          parseAndPush(tweets, itemContent, entry.entryId, true);\n        }\n      }\n    }\n  }\n\n  for (const tweet of tweets) {\n    if (tweet.inReplyToStatusId) {\n      for (const parentTweet of tweets) {\n        if (parentTweet.id === tweet.inReplyToStatusId) {\n          tweet.inReplyToStatus = parentTweet;\n          break;\n        }\n      }\n    }\n\n    if (tweet.isSelfThread && tweet.conversationId === tweet.id) {\n      for (const childTweet of tweets) {\n        if (childTweet.isSelfThread && childTweet.id !== tweet.id) {\n          tweet.thread.push(childTweet);\n        }\n      }\n\n      if (tweet.thread.length === 0) {\n        tweet.isSelfThread = false;\n      }\n    }\n  }\n\n  return tweets;\n}\n","import { Profile, parseProfile } from './profile';\nimport { QueryProfilesResponse, QueryTweetsResponse } from './timeline-v1';\nimport { SearchEntryRaw, parseLegacyTweet } from './timeline-v2';\nimport { Tweet } from './tweets';\n\nexport interface SearchTimeline {\n  data?: {\n    search_by_raw_query?: {\n      search_timeline?: {\n        timeline?: {\n          instructions?: {\n            entries?: SearchEntryRaw[];\n            entry?: SearchEntryRaw;\n            type?: string;\n          }[];\n        };\n      };\n    };\n  };\n}\n\nexport function parseSearchTimelineTweets(\n  timeline: SearchTimeline,\n): QueryTweetsResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const tweets: Tweet[] = [];\n  const instructions =\n    timeline.data?.search_by_raw_query?.search_timeline?.timeline\n      ?.instructions ?? [];\n  for (const instruction of instructions) {\n    if (\n      instruction.type === 'TimelineAddEntries' ||\n      instruction.type === 'TimelineReplaceEntry'\n    ) {\n      if (instruction.entry?.content?.cursorType === 'Bottom') {\n        bottomCursor = instruction.entry.content.value;\n        continue;\n      } else if (instruction.entry?.content?.cursorType === 'Top') {\n        topCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      const entries = instruction.entries ?? [];\n      for (const entry of entries) {\n        const itemContent = entry.content?.itemContent;\n        if (itemContent?.tweetDisplayType === 'Tweet') {\n          const tweetResultRaw = itemContent.tweet_results?.result;\n          const tweetResult = parseLegacyTweet(\n            tweetResultRaw?.core?.user_results?.result?.core,\n            tweetResultRaw?.core?.user_results?.result?.legacy,\n            tweetResultRaw?.legacy,\n            tweetResultRaw?.edit_control?.edit_control_initial,\n          );\n\n          if (tweetResult.success) {\n            if (!tweetResult.tweet.views && tweetResultRaw?.views?.count) {\n              const views = parseInt(tweetResultRaw.views.count);\n              if (!isNaN(views)) {\n                tweetResult.tweet.views = views;\n              }\n            }\n\n            tweets.push(tweetResult.tweet);\n          }\n        } else if (entry.content?.cursorType === 'Bottom') {\n          bottomCursor = entry.content.value;\n        } else if (entry.content?.cursorType === 'Top') {\n          topCursor = entry.content.value;\n        }\n      }\n    }\n  }\n\n  return { tweets, next: bottomCursor, previous: topCursor };\n}\n\nexport function parseSearchTimelineUsers(\n  timeline: SearchTimeline,\n): QueryProfilesResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const profiles: Profile[] = [];\n  const instructions =\n    timeline.data?.search_by_raw_query?.search_timeline?.timeline\n      ?.instructions ?? [];\n\n  for (const instruction of instructions) {\n    if (\n      instruction.type === 'TimelineAddEntries' ||\n      instruction.type === 'TimelineReplaceEntry'\n    ) {\n      if (instruction.entry?.content?.cursorType === 'Bottom') {\n        bottomCursor = instruction.entry.content.value;\n        continue;\n      } else if (instruction.entry?.content?.cursorType === 'Top') {\n        topCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      const entries = instruction.entries ?? [];\n      for (const entry of entries) {\n        const itemContent = entry.content?.itemContent;\n        if (itemContent?.userDisplayType === 'User') {\n          const userResultRaw = itemContent.user_results?.result;\n\n          if (userResultRaw?.legacy) {\n            const profile = parseProfile(\n              userResultRaw.legacy,\n              userResultRaw.is_blue_verified,\n            );\n\n            if (!profile.userId) {\n              profile.userId = userResultRaw.rest_id;\n            }\n\n            profiles.push(profile);\n          }\n        } else if (entry.content?.cursorType === 'Bottom') {\n          bottomCursor = entry.content.value;\n        } else if (entry.content?.cursorType === 'Top') {\n          topCursor = entry.content.value;\n        }\n      }\n    }\n  }\n\n  return { profiles, next: bottomCursor, previous: topCursor };\n}\n","import { addApiFeatures, requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { Profile } from './profile';\nimport { QueryProfilesResponse, QueryTweetsResponse } from './timeline-v1';\nimport { getTweetTimeline, getUserTimeline } from './timeline-async';\nimport { Tweet } from './tweets';\nimport {\n  SearchTimeline,\n  parseSearchTimelineTweets,\n  parseSearchTimelineUsers,\n} from './timeline-search';\nimport stringify from 'json-stable-stringify';\nimport { AuthenticationError } from './errors';\n\n/**\n * The categories that can be used in Twitter searches.\n */\nexport enum SearchMode {\n  Top,\n  Latest,\n  Photos,\n  Videos,\n  Users,\n}\n\nexport function searchTweets(\n  query: string,\n  maxTweets: number,\n  searchMode: SearchMode,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(query, maxTweets, (q, mt, c) => {\n    return fetchSearchTweets(q, mt, searchMode, auth, c);\n  });\n}\n\nexport function searchProfiles(\n  query: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Profile, void> {\n  return getUserTimeline(query, maxProfiles, (q, mt, c) => {\n    return fetchSearchProfiles(q, mt, auth, c);\n  });\n}\n\nexport async function fetchSearchTweets(\n  query: string,\n  maxTweets: number,\n  searchMode: SearchMode,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryTweetsResponse> {\n  const timeline = await getSearchTimeline(\n    query,\n    maxTweets,\n    searchMode,\n    auth,\n    cursor,\n  );\n\n  return parseSearchTimelineTweets(timeline);\n}\n\nexport async function fetchSearchProfiles(\n  query: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryProfilesResponse> {\n  const timeline = await getSearchTimeline(\n    query,\n    maxProfiles,\n    SearchMode.Users,\n    auth,\n    cursor,\n  );\n\n  return parseSearchTimelineUsers(timeline);\n}\n\nasync function getSearchTimeline(\n  query: string,\n  maxItems: number,\n  searchMode: SearchMode,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<SearchTimeline> {\n  if (!(await auth.isLoggedIn())) {\n    throw new AuthenticationError('Scraper is not logged-in for search.');\n  }\n\n  if (maxItems > 50) {\n    maxItems = 50;\n  }\n\n  const variables: Record<string, any> = {\n    rawQuery: query,\n    count: maxItems,\n    querySource: 'typed_query',\n    product: 'Top',\n  };\n\n  const features = addApiFeatures({\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_enhance_cards_enabled: false,\n    responsive_web_media_download_video_enabled: false,\n    responsive_web_twitter_article_tweet_consumption_enabled: false,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    interactive_text_enabled: false,\n    responsive_web_text_conversations_enabled: false,\n    vibe_api_enabled: false,\n  });\n\n  const fieldToggles: Record<string, any> = {\n    withArticleRichContentState: false,\n  };\n\n  if (cursor != null && cursor != '') {\n    variables['cursor'] = cursor;\n  }\n\n  switch (searchMode) {\n    case SearchMode.Latest:\n      variables.product = 'Latest';\n      break;\n    case SearchMode.Photos:\n      variables.product = 'Photos';\n      break;\n    case SearchMode.Videos:\n      variables.product = 'Videos';\n      break;\n    case SearchMode.Users:\n      variables.product = 'People';\n      break;\n    default:\n      break;\n  }\n\n  const params = new URLSearchParams();\n  const featuresStr = stringify(features);\n  const fieldTogglesStr = stringify(fieldToggles);\n  const variablesStr = stringify(variables);\n  if (featuresStr) params.set('features', featuresStr);\n  if (fieldTogglesStr) params.set('fieldToggles', fieldTogglesStr);\n  if (variablesStr) params.set('variables', variablesStr);\n\n  const res = await requestApi<SearchTimeline>(\n    `https://api.x.com/graphql/gkjsKepM6gl_HmFWoWKfgg/SearchTimeline?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return res.value;\n}\n","import { Profile, parseProfile } from './profile';\nimport { QueryProfilesResponse } from './timeline-v1';\nimport { TimelineUserResultRaw } from './timeline-v2';\n\nexport interface RelationshipEntryItemContentRaw {\n  itemType?: string;\n  userDisplayType?: string;\n  user_results?: {\n    result?: TimelineUserResultRaw;\n  };\n}\n\nexport interface RelationshipEntryRaw {\n  entryId: string;\n  sortIndex: string;\n  content?: {\n    cursorType?: string;\n    entryType?: string;\n    __typename?: string;\n    value?: string;\n    itemContent?: RelationshipEntryItemContentRaw;\n  };\n}\n\nexport interface RelationshipTimeline {\n  data?: {\n    user?: {\n      result?: {\n        timeline?: {\n          timeline?: {\n            instructions?: {\n              entries?: RelationshipEntryRaw[];\n              entry?: RelationshipEntryRaw;\n              type?: string;\n            }[];\n          };\n        };\n      };\n    };\n  };\n}\n\nexport function parseRelationshipTimeline(\n  timeline: RelationshipTimeline,\n): QueryProfilesResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const profiles: Profile[] = [];\n  const instructions =\n    timeline.data?.user?.result?.timeline?.timeline?.instructions ?? [];\n\n  for (const instruction of instructions) {\n    if (\n      instruction.type === 'TimelineAddEntries' ||\n      instruction.type === 'TimelineReplaceEntry'\n    ) {\n      if (instruction.entry?.content?.cursorType === 'Bottom') {\n        bottomCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      if (instruction.entry?.content?.cursorType === 'Top') {\n        topCursor = instruction.entry.content.value;\n        continue;\n      }\n\n      const entries = instruction.entries ?? [];\n      for (const entry of entries) {\n        const itemContent = entry.content?.itemContent;\n        if (itemContent?.userDisplayType === 'User') {\n          const userResultRaw = itemContent.user_results?.result;\n\n          if (userResultRaw?.legacy) {\n            const profile = parseProfile(\n              userResultRaw.legacy,\n              userResultRaw.is_blue_verified,\n            );\n\n            if (!profile.userId) {\n              profile.userId = userResultRaw.rest_id;\n            }\n\n            profiles.push(profile);\n          }\n        } else if (entry.content?.cursorType === 'Bottom') {\n          bottomCursor = entry.content.value;\n        } else if (entry.content?.cursorType === 'Top') {\n          topCursor = entry.content.value;\n        }\n      }\n    }\n  }\n\n  return { profiles, next: bottomCursor, previous: topCursor };\n}\n","import { addApiFeatures, requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { Profile } from './profile';\nimport { QueryProfilesResponse } from './timeline-v1';\nimport { getUserTimeline } from './timeline-async';\nimport {\n  RelationshipTimeline,\n  parseRelationshipTimeline,\n} from './timeline-relationship';\nimport stringify from 'json-stable-stringify';\nimport { AuthenticationError } from './errors';\n\nexport function getFollowing(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Profile, void> {\n  return getUserTimeline(userId, maxProfiles, (q, mt, c) => {\n    return fetchProfileFollowing(q, mt, auth, c);\n  });\n}\n\nexport function getFollowers(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Profile, void> {\n  return getUserTimeline(userId, maxProfiles, (q, mt, c) => {\n    return fetchProfileFollowers(q, mt, auth, c);\n  });\n}\n\nexport async function fetchProfileFollowing(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryProfilesResponse> {\n  if (!(await auth.isLoggedIn())) {\n    throw new AuthenticationError(\n      'Scraper is not logged-in for profile following.',\n    );\n  }\n\n  const timeline = await getFollowingTimeline(\n    userId,\n    maxProfiles,\n    auth,\n    cursor,\n  );\n\n  return parseRelationshipTimeline(timeline);\n}\n\nexport async function fetchProfileFollowers(\n  userId: string,\n  maxProfiles: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<QueryProfilesResponse> {\n  if (!(await auth.isLoggedIn())) {\n    throw new AuthenticationError(\n      'Scraper is not logged-in for profile followers.',\n    );\n  }\n\n  const timeline = await getFollowersTimeline(\n    userId,\n    maxProfiles,\n    auth,\n    cursor,\n  );\n\n  return parseRelationshipTimeline(timeline);\n}\n\nasync function getFollowingTimeline(\n  userId: string,\n  maxItems: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<RelationshipTimeline> {\n  if (!auth.isLoggedIn()) {\n    throw new AuthenticationError(\n      'Scraper is not logged-in for profile following.',\n    );\n  }\n\n  if (maxItems > 50) {\n    maxItems = 50;\n  }\n\n  const variables: Record<string, any> = {\n    userId,\n    count: maxItems,\n    includePromotedContent: false,\n  };\n\n  const features = addApiFeatures({\n    responsive_web_twitter_article_tweet_consumption_enabled: false,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_media_download_video_enabled: false,\n  });\n\n  if (cursor != null && cursor != '') {\n    variables['cursor'] = cursor;\n  }\n\n  const params = new URLSearchParams();\n  const featuresStr = stringify(features);\n  const variablesStr = stringify(variables);\n  if (featuresStr) params.set('features', featuresStr);\n  if (variablesStr) params.set('variables', variablesStr);\n\n  const res = await requestApi<RelationshipTimeline>(\n    `https://x.com/i/api/graphql/iSicc7LrzWGBgDPL0tM_TQ/Following?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return res.value;\n}\n\nasync function getFollowersTimeline(\n  userId: string,\n  maxItems: number,\n  auth: TwitterAuth,\n  cursor?: string,\n): Promise<RelationshipTimeline> {\n  if (!auth.isLoggedIn()) {\n    throw new AuthenticationError(\n      'Scraper is not logged-in for profile followers.',\n    );\n  }\n\n  if (maxItems > 50) {\n    maxItems = 50;\n  }\n\n  const variables: Record<string, any> = {\n    userId,\n    count: maxItems,\n    includePromotedContent: false,\n  };\n\n  const features = addApiFeatures({\n    responsive_web_twitter_article_tweet_consumption_enabled: false,\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n      true,\n    longform_notetweets_inline_media_enabled: true,\n    responsive_web_media_download_video_enabled: false,\n  });\n\n  if (cursor != null && cursor != '') {\n    variables['cursor'] = cursor;\n  }\n\n  const params = new URLSearchParams();\n  const featuresStr = stringify(features);\n  const variablesStr = stringify(variables);\n  if (featuresStr) params.set('features', featuresStr);\n  if (variablesStr) params.set('variables', variablesStr);\n\n  const res = await requestApi<RelationshipTimeline>(\n    `https://x.com/i/api/graphql/rRXFSG5vR6drKr5M37YOTw/Followers?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return res.value;\n}\n","import { addApiParams, requestApi } from './api';\nimport { TwitterAuth } from './auth';\nimport { TimelineV1 } from './timeline-v1';\n\nexport async function getTrends(auth: TwitterAuth): Promise<string[]> {\n  const params = new URLSearchParams();\n  addApiParams(params, false);\n\n  params.set('count', '20');\n  params.set('candidate_source', 'trends');\n  params.set('include_page_configuration', 'false');\n  params.set('entity_tokens', 'false');\n\n  const res = await requestApi<TimelineV1>(\n    `https://api.x.com/2/guide.json?${params.toString()}`,\n    auth,\n  );\n  if (!res.success) {\n    throw res.err;\n  }\n\n  const instructions = res.value.timeline?.instructions ?? [];\n  if (instructions.length < 2) {\n    throw new Error('No trend entries found.');\n  }\n\n  // Some of this is silly, but for now we're assuming we know nothing about the\n  // data, and that anything can be missing. Go has non-nilable strings and empty\n  // slices are nil, so it largely doesn't need to worry about this.\n  const entries = instructions[1].addEntries?.entries ?? [];\n  if (entries.length < 2) {\n    throw new Error('No trend entries found.');\n  }\n\n  const items = entries[1].content?.timelineModule?.items ?? [];\n  const trends: string[] = [];\n  for (const item of items) {\n    const trend =\n      item.item?.clientEventInfo?.details?.guideDetails?.transparentGuideDetails\n        ?.trendMetadata?.trendName;\n    if (trend != null) {\n      trends.push(trend);\n    }\n  }\n\n  return trends;\n}\n","import { QueryTweetsResponse } from './timeline-v1';\nimport { parseAndPush, TimelineEntryRaw } from './timeline-v2';\nimport { Tweet } from './tweets';\n\nexport interface ListTimeline {\n  data?: {\n    list?: {\n      tweets_timeline?: {\n        timeline?: {\n          instructions?: {\n            entries?: TimelineEntryRaw[];\n            entry?: TimelineEntryRaw;\n            type?: string;\n          }[];\n        };\n      };\n    };\n  };\n}\n\nexport function parseListTimelineTweets(\n  timeline: ListTimeline,\n): QueryTweetsResponse {\n  let bottomCursor: string | undefined;\n  let topCursor: string | undefined;\n  const tweets: Tweet[] = [];\n  const instructions =\n    timeline.data?.list?.tweets_timeline?.timeline?.instructions ?? [];\n  for (const instruction of instructions) {\n    const entries = instruction.entries ?? [];\n\n    for (const entry of entries) {\n      const entryContent = entry.content;\n      if (!entryContent) continue;\n\n      if (entryContent.cursorType === 'Bottom') {\n        bottomCursor = entryContent.value;\n        continue;\n      } else if (entryContent.cursorType === 'Top') {\n        topCursor = entryContent.value;\n        continue;\n      }\n\n      const idStr = entry.entryId;\n      if (\n        !idStr.startsWith('tweet') &&\n        !idStr.startsWith('list-conversation')\n      ) {\n        continue;\n      }\n\n      if (entryContent.itemContent) {\n        parseAndPush(tweets, entryContent.itemContent, idStr);\n      } else if (entryContent.items) {\n        for (const contentItem of entryContent.items) {\n          if (\n            contentItem.item &&\n            contentItem.item.itemContent &&\n            contentItem.entryId\n          ) {\n            parseAndPush(\n              tweets,\n              contentItem.item.itemContent,\n              contentItem.entryId.split('tweet-')[1],\n            );\n          }\n        }\n      }\n    }\n  }\n\n  return { tweets, next: bottomCursor, previous: topCursor };\n}\n","import { addApiFeatures, requestApi } from './api';\nimport { apiRequestFactory } from './api-data';\nimport { TwitterAuth } from './auth';\nimport { AuthenticationError } from './errors';\nimport { getUserIdByScreenName } from './profile';\nimport { getTweetTimeline } from './timeline-async';\nimport { ListTimeline, parseListTimelineTweets } from './timeline-list';\nimport { LegacyTweetRaw, QueryTweetsResponse } from './timeline-v1';\nimport {\n  parseThreadedConversation,\n  parseTimelineEntryItemContentRaw,\n  parseTimelineTweetsV2,\n  ThreadedConversation,\n  TimelineEntryItemContentRaw,\n  TimelineV2,\n} from './timeline-v2';\n\nexport interface Mention {\n  id: string;\n  username?: string;\n  name?: string;\n}\n\nexport interface Photo {\n  id: string;\n  url: string;\n  alt_text: string | undefined;\n}\n\nexport interface Video {\n  id: string;\n  preview: string;\n  url?: string;\n}\n\nexport interface PlaceRaw {\n  id?: string;\n  place_type?: string;\n  name?: string;\n  full_name?: string;\n  country_code?: string;\n  country?: string;\n  bounding_box?: {\n    type?: string;\n    coordinates?: number[][][];\n  };\n}\n\n/**\n * A parsed Tweet object.\n */\nexport interface Tweet {\n  __raw_UNSTABLE?: LegacyTweetRaw;\n  bookmarkCount?: number;\n  conversationId?: string;\n  hashtags: string[];\n  html?: string;\n  id?: string;\n  inReplyToStatus?: Tweet;\n  inReplyToStatusId?: string;\n  isEdited?: boolean;\n  versions?: string[];\n  isQuoted?: boolean;\n  isPin?: boolean;\n  isReply?: boolean;\n  isRetweet?: boolean;\n  isSelfThread?: boolean;\n  likes?: number;\n  name?: string;\n  mentions: Mention[];\n  permanentUrl?: string;\n  photos: Photo[];\n  place?: PlaceRaw;\n  quotedStatus?: Tweet;\n  quotedStatusId?: string;\n  replies?: number;\n  retweets?: number;\n  retweetedStatus?: Tweet;\n  retweetedStatusId?: string;\n  text?: string;\n  thread: Tweet[];\n  timeParsed?: Date;\n  timestamp?: number;\n  urls: string[];\n  userId?: string;\n  username?: string;\n  videos: Video[];\n  views?: number;\n  sensitiveContent?: boolean;\n  userProfile?: {\n    profileImageUrlHttps?: string;\n    profileBannerUrl?: string;\n    createdAt?: string;\n    favouritesCount?: number;\n    followersCount?: number;\n    friendsCount?: number;\n    listedCount?: number;\n    mediaCount?: number;\n    statusesCount?: number;\n  };\n}\n\nexport type TweetQuery =\n  | Partial<Tweet>\n  | ((tweet: Tweet) => boolean | Promise<boolean>);\n\nexport const features = addApiFeatures({\n  interactive_text_enabled: true,\n  longform_notetweets_inline_media_enabled: false,\n  responsive_web_text_conversations_enabled: false,\n  tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled:\n    false,\n  vibe_api_enabled: false,\n});\n\nexport async function fetchTweets(\n  userId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (maxTweets > 200) {\n    maxTweets = 200;\n  }\n\n  const userTweetsRequest = apiRequestFactory.createUserTweetsRequest();\n  userTweetsRequest.variables.userId = userId;\n  userTweetsRequest.variables.count = maxTweets;\n  userTweetsRequest.variables.includePromotedContent = false; // true on the website\n\n  if (cursor != null && cursor != '') {\n    userTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<TimelineV2>(\n    userTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseTimelineTweetsV2(res.value);\n}\n\nexport async function fetchTweetsAndReplies(\n  userId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (maxTweets > 40) {\n    maxTweets = 40;\n  }\n\n  const userTweetsRequest =\n    apiRequestFactory.createUserTweetsAndRepliesRequest();\n  userTweetsRequest.variables.userId = userId;\n  userTweetsRequest.variables.count = maxTweets;\n  userTweetsRequest.variables.includePromotedContent = false; // true on the website\n\n  if (cursor != null && cursor != '') {\n    userTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<TimelineV2>(\n    userTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseTimelineTweetsV2(res.value);\n}\n\nexport async function fetchListTweets(\n  listId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (maxTweets > 200) {\n    maxTweets = 200;\n  }\n\n  const listTweetsRequest = apiRequestFactory.createListTweetsRequest();\n  listTweetsRequest.variables.listId = listId;\n  listTweetsRequest.variables.count = maxTweets;\n\n  if (cursor != null && cursor != '') {\n    listTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<ListTimeline>(\n    listTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseListTimelineTweets(res.value);\n}\n\nexport function getTweets(\n  user: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(user, maxTweets, async (q, mt, c) => {\n    const userIdRes = await getUserIdByScreenName(q, auth);\n\n    if (!userIdRes.success) {\n      throw userIdRes.err;\n    }\n\n    const { value: userId } = userIdRes;\n\n    return fetchTweets(userId, mt, c, auth);\n  });\n}\n\nexport function getTweetsByUserId(\n  userId: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(userId, maxTweets, (q, mt, c) => {\n    return fetchTweets(q, mt, c, auth);\n  });\n}\n\nexport function getTweetsAndReplies(\n  user: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(user, maxTweets, async (q, mt, c) => {\n    const userIdRes = await getUserIdByScreenName(q, auth);\n\n    if (!userIdRes.success) {\n      throw userIdRes.err;\n    }\n\n    const { value: userId } = userIdRes;\n\n    return fetchTweetsAndReplies(userId, mt, c, auth);\n  });\n}\n\nexport function getTweetsAndRepliesByUserId(\n  userId: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(userId, maxTweets, (q, mt, c) => {\n    return fetchTweetsAndReplies(q, mt, c, auth);\n  });\n}\n\nexport async function fetchLikedTweets(\n  userId: string,\n  maxTweets: number,\n  cursor: string | undefined,\n  auth: TwitterAuth,\n): Promise<QueryTweetsResponse> {\n  if (!(await auth.isLoggedIn())) {\n    throw new AuthenticationError(\n      'Scraper is not logged-in for fetching liked tweets.',\n    );\n  }\n\n  if (maxTweets > 200) {\n    maxTweets = 200;\n  }\n\n  const userTweetsRequest = apiRequestFactory.createUserLikedTweetsRequest();\n  userTweetsRequest.variables.userId = userId;\n  userTweetsRequest.variables.count = maxTweets;\n  userTweetsRequest.variables.includePromotedContent = false; // true on the website\n\n  if (cursor != null && cursor != '') {\n    userTweetsRequest.variables['cursor'] = cursor;\n  }\n\n  const res = await requestApi<TimelineV2>(\n    userTweetsRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseTimelineTweetsV2(res.value);\n}\n\nexport function getLikedTweets(\n  user: string,\n  maxTweets: number,\n  auth: TwitterAuth,\n): AsyncGenerator<Tweet, void> {\n  return getTweetTimeline(user, maxTweets, async (q, mt, c) => {\n    const userIdRes = await getUserIdByScreenName(q, auth);\n\n    if (!userIdRes.success) {\n      throw userIdRes.err;\n    }\n\n    const { value: userId } = userIdRes;\n\n    return fetchLikedTweets(userId, mt, c, auth);\n  });\n}\n\nexport async function getTweetWhere(\n  tweets: AsyncIterable<Tweet>,\n  query: TweetQuery,\n): Promise<Tweet | null> {\n  const isCallback = typeof query === 'function';\n\n  for await (const tweet of tweets) {\n    const matches = isCallback\n      ? await query(tweet)\n      : checkTweetMatches(tweet, query);\n\n    if (matches) {\n      return tweet;\n    }\n  }\n\n  return null;\n}\n\nexport async function getTweetsWhere(\n  tweets: AsyncIterable<Tweet>,\n  query: TweetQuery,\n): Promise<Tweet[]> {\n  const isCallback = typeof query === 'function';\n  const filtered = [];\n\n  for await (const tweet of tweets) {\n    const matches = isCallback ? query(tweet) : checkTweetMatches(tweet, query);\n\n    if (!matches) continue;\n    filtered.push(tweet);\n  }\n\n  return filtered;\n}\n\nfunction checkTweetMatches(tweet: Tweet, options: Partial<Tweet>): boolean {\n  return Object.keys(options).every((k) => {\n    const key = k as keyof Tweet;\n    return tweet[key] === options[key];\n  });\n}\n\nexport async function getLatestTweet(\n  user: string,\n  includeRetweets: boolean,\n  max: number,\n  auth: TwitterAuth,\n): Promise<Tweet | null | void> {\n  const timeline = getTweets(user, max, auth);\n\n  // No point looping if max is 1, just use first entry.\n  return max === 1\n    ? (await timeline.next()).value\n    : await getTweetWhere(timeline, { isRetweet: includeRetweets });\n}\n\nexport interface TweetResultByRestId {\n  data?: TimelineEntryItemContentRaw;\n}\n\nexport async function getTweet(\n  id: string,\n  auth: TwitterAuth,\n): Promise<Tweet | null> {\n  const tweetDetailRequest = apiRequestFactory.createTweetDetailRequest();\n  tweetDetailRequest.variables.focalTweetId = id;\n\n  const res = await requestApi<ThreadedConversation>(\n    tweetDetailRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  if (!res.value) {\n    return null;\n  }\n\n  const tweets = parseThreadedConversation(res.value);\n  return tweets.find((tweet) => tweet.id === id) ?? null;\n}\n\nexport async function getTweetAnonymous(\n  id: string,\n  auth: TwitterAuth,\n): Promise<Tweet | null> {\n  const tweetResultByRestIdRequest =\n    apiRequestFactory.createTweetResultByRestIdRequest();\n  tweetResultByRestIdRequest.variables.tweetId = id;\n\n  const res = await requestApi<TweetResultByRestId>(\n    tweetResultByRestIdRequest.toRequestUrl(),\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  if (!res.value.data) {\n    return null;\n  }\n\n  return parseTimelineEntryItemContentRaw(res.value.data, id);\n}\n","import {\n  DmConversationTimeline,\n  DmMessageEntry,\n  DmCursorOptions,\n} from './direct-messages';\nimport { jitter } from './api';\n\nexport interface FetchDmConversationMessagesResponse {\n  conversation: DmConversationTimeline;\n  next?: DmCursorOptions;\n}\n\nexport type FetchDmConversationFn = (\n  conversationId: string,\n  maxMessages: number,\n  cursor: DmCursorOptions | undefined,\n) => Promise<FetchDmConversationMessagesResponse>;\n\nexport async function* getDmConversationMessagesGenerator(\n  conversationId: string,\n  maxMessages: number,\n  initialCursor: DmCursorOptions | undefined,\n  fetchFunc: FetchDmConversationFn,\n): AsyncGenerator<DmMessageEntry, void> {\n  let nMessages = 0;\n  let cursor = initialCursor;\n\n  while (nMessages < maxMessages) {\n    const batch: FetchDmConversationMessagesResponse = await fetchFunc(\n      conversationId,\n      maxMessages,\n      cursor,\n    );\n\n    const { conversation, next } = batch;\n\n    if (!conversation?.entries || conversation?.entries?.length === 0) {\n      break;\n    }\n\n    for (const entry of conversation.entries) {\n      if (nMessages < maxMessages) {\n        yield entry;\n        nMessages++;\n      } else {\n        break;\n      }\n    }\n\n    cursor = next;\n\n    if (conversation.status === 'AT_END' || !next) {\n      break;\n    }\n\n    await jitter(1000);\n  }\n}\n","import { AuthenticationError } from './errors';\nimport { TwitterAuth } from './auth';\nimport { LegacyUserRaw } from './profile';\nimport { requestApi, addApiParams } from './api';\n\nimport { getDmConversationMessagesGenerator } from './direct-messages-async';\n\nexport interface DmInboxResponse {\n  inbox_initial_state: DmInbox;\n}\n\nexport interface DmInbox {\n  last_seen_event_id: string;\n  trusted_last_seen_event_id: string;\n  untrusted_last_seen_event_id: string;\n  cursor: string;\n  inbox_timelines: DmInboxTimelines;\n  entries: DmMessageEntry[];\n  users: { [key: string]: LegacyUserRaw };\n  conversations: { [key: string]: DmConversation };\n}\n\nexport interface DmConversationResponse {\n  conversation_timeline: DmConversationTimeline;\n}\n\nexport interface DmConversationTimeline {\n  status: DmStatus;\n  min_entry_id: string;\n  max_entry_id: string;\n  entries: DmMessageEntry[];\n  users: { [key: string]: LegacyUserRaw };\n  conversations: { [key: string]: DmConversation };\n}\n\nexport interface DmConversation {\n  conversation_id: string;\n  type: string;\n  sort_event_id: string;\n  sort_timestamp: string;\n  participants: DmParticipant[];\n  nsfw: boolean;\n  notifications_disabled: boolean;\n  mention_notifications_disabled: boolean;\n  last_read_event_id: string;\n  read_only: boolean;\n  trusted: boolean;\n  muted: boolean;\n  status: DmStatus;\n  min_entry_id: string;\n  max_entry_id: string;\n}\n\nexport type DmStatus = 'AT_END' | 'HAS_MORE';\n\nexport interface DmParticipant {\n  user_id: string;\n  last_read_event_id?: string;\n}\n\nexport interface DmMessageEntry {\n  welcome_message_create?: DmWelcomeMessage;\n  message?: DmMessage;\n}\n\nexport interface DmMessage {\n  id: string;\n  time: string;\n  affects_sort: boolean;\n  request_id: string;\n  conversation_id: string;\n  message_data: DmMessageData;\n  message_reactions: DmReaction[];\n}\n\nexport interface DmMessageData {\n  id: string;\n  time: string;\n  recipient_id: string;\n  sender_id: string;\n  text: string;\n  edit_count?: number;\n  entities?: DmMessageEntities;\n}\n\nexport interface DmReaction {\n  id: string;\n  time: string;\n  conversation_id: string;\n  message_id: string;\n  reaction_key: string;\n  emoji_reaction: string;\n  sender_id: string;\n}\n\nexport interface DmMessageEntities {\n  // TODO: Not sure what these types are.\n  hashtags: any[];\n  symbols: any[];\n  user_mentions: any[];\n  urls: DmMessageUrl[];\n}\n\nexport interface DmMessageUrl {\n  url: string;\n  expanded_url: string;\n  display_url: string;\n  indices: number[];\n}\n\nexport interface DmWelcomeMessage extends DmMessage {\n  welcome_message_id: string;\n}\n\nexport interface DmInboxTimelines {\n  trusted: DmTimelineState;\n  untrusted: DmTimelineState;\n  untrusted_low_quality: DmTimelineState;\n}\n\nexport interface DmTimelineState {\n  status: DmStatus;\n  min_entry_id: string;\n}\n\nexport interface DmCursorOptions {\n  maxId?: string;\n  minId?: string;\n}\n\nexport async function fetchDmInbox(auth: TwitterAuth) {\n  if (!(await auth.isLoggedIn())) {\n    throw new AuthenticationError(\n      'Scraper is not logged-in for fetching direct messages.',\n    );\n  }\n\n  // TODO: Not sure how the \"cursor\" works for this. I don't have enough DMs to test.\n  const params = new URLSearchParams();\n  addApiParams(params, false);\n\n  params.set('nsfw_filtering_enabled', 'false');\n  params.set('filter_low_quality', 'true');\n  params.set('include_quality', 'all');\n  params.set('include_ext_profile_image_shape', '1');\n  params.set('dm_secret_conversations_enabled', 'false');\n  params.set('krs_registration_enabled', 'false');\n  params.set('include_ext_limited_action_results', 'true');\n  params.set('dm_users', 'true');\n  params.set('include_groups', 'true');\n  params.set('include_inbox_timelines', 'true');\n  params.set('supports_reactions', 'true');\n  params.set('supports_edit', 'true');\n  params.set('include_ext_edit_control', 'true');\n  params.set('include_ext_business_affiliations_label', 'true');\n  params.set('include_ext_parody_commentary_fan_label', 'true');\n  params.set(\n    'ext',\n    'mediaColor,altText,mediaStats,highlightedLabel,parodyCommentaryFanLabel,voiceInfo,birdwatchPivot,superFollowMetadata,unmentionInfo,editControl,article',\n  );\n\n  const res = await requestApi<DmInboxResponse>(\n    `https://x.com/i/api/1.1/dm/inbox_initial_state.json?${params.toString()}`,\n    auth,\n  );\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseDmInbox(res.value);\n}\n\nexport async function parseDmInbox(inbox: DmInboxResponse) {\n  return inbox.inbox_initial_state;\n}\n\n// This gets the current authenticated user's direct messages.\n// This requires the user to be authenticated.\nexport async function getDmInbox(auth: TwitterAuth) {\n  return await fetchDmInbox(auth);\n}\n\n// This gets the current authenticated user's direct conversations.\n// This requires the user to be authenticated.\nexport async function fetchDmConversation(\n  conversationId: string,\n  cursor: DmCursorOptions | undefined,\n  auth: TwitterAuth,\n) {\n  if (!(await auth.isLoggedIn())) {\n    throw new AuthenticationError(\n      'Scraper is not logged-in for fetching direct messages.',\n    );\n  }\n\n  const params = new URLSearchParams();\n  addApiParams(params, false);\n\n  params.set('context', 'FETCH_DM_CONVERSATION_HISTORY');\n  params.set('include_ext_profile_image_shape', '1');\n  params.set('dm_secret_conversations_enabled', 'false');\n  params.set('krs_registration_enabled', 'false');\n  params.set('include_ext_limited_action_results', 'true');\n  params.set('dm_users', 'true');\n  params.set('include_groups', 'true');\n  params.set('include_inbox_timelines', 'true');\n  params.set('supports_reactions', 'true');\n  params.set('supports_edit', 'true');\n  params.set('include_conversation_info', 'true');\n  params.set(\n    'ext',\n    'mediaColor,altText,mediaStats,highlightedLabel,parodyCommentaryFanLabel,voiceInfo,birdwatchPivot,superFollowMetadata,unmentionInfo,editControl,article',\n  );\n\n  // By default, passing no cursor means you get the latest results.\n  // `max_id` does backwards pagination using min_entry_id as the maxId to get older messages.\n  // `min_id` does forward pagination using max_entry_id as the minId to get newer messages.\n  // To know when there are no more pages, the response's \"status\" will return \"AT_END\".\n  if (cursor) {\n    if (cursor.maxId) {\n      params.set('max_id', cursor.maxId);\n    }\n    if (cursor.minId) {\n      params.set('min_id', cursor.minId);\n    }\n  }\n\n  const url = `https://x.com/i/api/1.1/dm/conversation/${conversationId}.json?${params.toString()}`;\n\n  const res = await requestApi<DmConversationResponse>(url, auth);\n\n  if (!res.success) {\n    throw res.err;\n  }\n\n  return parseDmConversation(res.value);\n}\n\nexport async function parseDmConversation(\n  conversation: DmConversationResponse,\n) {\n  return conversation.conversation_timeline;\n}\n\nexport async function getDmConversation(\n  conversationId: string,\n  cursor: DmCursorOptions | undefined,\n  auth: TwitterAuth,\n) {\n  return await fetchDmConversation(conversationId, cursor, auth);\n}\n\nexport function getDmMessages(\n  conversationId: string,\n  maxMessages: number,\n  cursor: DmCursorOptions | undefined,\n  auth: TwitterAuth,\n): AsyncGenerator<DmMessageEntry, void> {\n  return getDmConversationMessagesGenerator(\n    conversationId,\n    maxMessages,\n    cursor,\n    async (id, _max, cursor) => {\n      const conversation = await fetchDmConversation(id, cursor, auth);\n\n      let next: DmCursorOptions | undefined = undefined;\n\n      if (cursor?.minId && conversation.max_entry_id) {\n        next = { minId: conversation.max_entry_id };\n      } else if (conversation.min_entry_id) {\n        next = { maxId: conversation.min_entry_id };\n      }\n\n      return {\n        conversation,\n        next,\n      };\n    },\n  );\n}\n\nexport function findDmConversationsByUserId(\n  inbox: DmInbox,\n  userId: string,\n): DmConversation[] {\n  const conversations: DmConversation[] = [];\n\n  for (const conversationId in inbox.conversations) {\n    const conversation = inbox.conversations[conversationId];\n    const hasUser = conversation.participants.some(\n      (participant) => participant.user_id === userId,\n    );\n\n    if (hasUser) {\n      conversations.push(conversation);\n    }\n  }\n\n  return conversations;\n}\n","import { Cookie } from 'tough-cookie';\nimport { bearerToken, FetchTransformOptions, RequestApiResult } from './api';\nimport { TwitterAuth, TwitterAuthOptions, TwitterGuestAuth } from './auth';\nimport { FlowSubtaskHandler, TwitterUserAuth } from './auth-user';\nimport { getProfile, getUserIdByScreenName, Profile } from './profile';\nimport {\n  fetchSearchProfiles,\n  fetchSearchTweets,\n  SearchMode,\n  searchProfiles,\n  searchTweets,\n} from './search';\nimport {\n  fetchProfileFollowing,\n  fetchProfileFollowers,\n  getFollowing,\n  getFollowers,\n} from './relationships';\nimport { QueryProfilesResponse, QueryTweetsResponse } from './timeline-v1';\nimport { getTrends } from './trends';\nimport {\n  Tweet,\n  getTweetAnonymous,\n  getTweets,\n  getLatestTweet,\n  getLikedTweets,\n  getTweetWhere,\n  getTweetsWhere,\n  getTweetsByUserId,\n  TweetQuery,\n  getTweet,\n  fetchListTweets,\n  getTweetsAndRepliesByUserId,\n  getTweetsAndReplies,\n  fetchLikedTweets,\n} from './tweets';\nimport fetch from 'cross-fetch';\nimport { RateLimitStrategy } from './rate-limit';\nimport {\n  DmConversationTimeline,\n  DmInbox,\n  DmMessageEntry,\n  DmCursorOptions,\n  getDmConversation,\n  getDmMessages,\n  getDmInbox,\n  findDmConversationsByUserId,\n  DmConversation,\n} from './direct-messages';\n\nconst twUrl = 'https://x.com';\n\nexport interface ScraperOptions {\n  /**\n   * An alternative fetch function to use instead of the default fetch function. This may be useful\n   * in nonstandard runtime environments, such as edge workers.\n   */\n  fetch: typeof fetch;\n\n  /**\n   * Additional options that control how requests and responses are processed. This can be used to\n   * proxy requests through other hosts, for example.\n   */\n  transform: Partial<FetchTransformOptions>;\n\n  /**\n   * A handling strategy for rate limits (HTTP 429).\n   */\n  rateLimitStrategy: RateLimitStrategy;\n}\n\n/**\n * An interface to Twitter's undocumented API.\n * - Reusing Scraper objects is recommended to minimize the time spent authenticating unnecessarily.\n */\nexport class Scraper {\n  private auth!: TwitterAuth;\n  private authTrends!: TwitterAuth;\n  private token: string;\n\n  /**\n   * Creates a new Scraper object.\n   * - Scrapers maintain their own guest tokens for Twitter's internal API.\n   * - Reusing Scraper objects is recommended to minimize the time spent authenticating unnecessarily.\n   */\n  constructor(private readonly options?: Partial<ScraperOptions>) {\n    this.token = bearerToken;\n    this.useGuestAuth();\n  }\n\n  /**\n   * Registers a subtask handler for the given subtask ID. This\n   * will override any existing handler for the same subtask.\n   * @param subtaskId The ID of the subtask to register the handler for.\n   * @param subtaskHandler The handler function to register.\n   */\n  public registerAuthSubtaskHandler(\n    subtaskId: string,\n    subtaskHandler: FlowSubtaskHandler,\n  ): void {\n    if (this.auth instanceof TwitterUserAuth) {\n      this.auth.registerSubtaskHandler(subtaskId, subtaskHandler);\n    }\n\n    if (this.authTrends instanceof TwitterUserAuth) {\n      this.authTrends.registerSubtaskHandler(subtaskId, subtaskHandler);\n    }\n  }\n\n  /**\n   * Initializes auth properties using a guest token.\n   * Used when creating a new instance of this class, and when logging out.\n   * @internal\n   */\n  private useGuestAuth() {\n    this.auth = new TwitterGuestAuth(this.token, this.getAuthOptions());\n    this.authTrends = new TwitterGuestAuth(this.token, this.getAuthOptions());\n  }\n\n  /**\n   * Fetches a Twitter profile.\n   * @param username The Twitter username of the profile to fetch, without an `@` at the beginning.\n   * @returns The requested {@link Profile}.\n   */\n  public async getProfile(username: string): Promise<Profile> {\n    const res = await getProfile(username, this.auth);\n    return this.handleResponse(res);\n  }\n\n  /**\n   * Fetches the user ID corresponding to the provided screen name.\n   * @param screenName The Twitter screen name of the profile to fetch.\n   * @returns The ID of the corresponding account.\n   */\n  public async getUserIdByScreenName(screenName: string): Promise<string> {\n    const res = await getUserIdByScreenName(screenName, this.auth);\n    return this.handleResponse(res);\n  }\n\n  /**\n   * Fetches tweets from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxTweets The maximum number of tweets to return.\n   * @param includeReplies Whether or not replies should be included in the response.\n   * @param searchMode The category filter to apply to the search. Defaults to `Top`.\n   * @returns An {@link AsyncGenerator} of tweets matching the provided filters.\n   */\n  public searchTweets(\n    query: string,\n    maxTweets: number,\n    searchMode: SearchMode = SearchMode.Top,\n  ): AsyncGenerator<Tweet, void> {\n    return searchTweets(query, maxTweets, searchMode, this.auth);\n  }\n\n  /**\n   * Fetches profiles from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxProfiles The maximum number of profiles to return.\n   * @returns An {@link AsyncGenerator} of tweets matching the provided filter(s).\n   */\n  public searchProfiles(\n    query: string,\n    maxProfiles: number,\n  ): AsyncGenerator<Profile, void> {\n    return searchProfiles(query, maxProfiles, this.auth);\n  }\n\n  /**\n   * Fetches tweets from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxTweets The maximum number of tweets to return.\n   * @param includeReplies Whether or not replies should be included in the response.\n   * @param searchMode The category filter to apply to the search. Defaults to `Top`.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchSearchTweets(\n    query: string,\n    maxTweets: number,\n    searchMode: SearchMode,\n    cursor?: string,\n  ): Promise<QueryTweetsResponse> {\n    return fetchSearchTweets(query, maxTweets, searchMode, this.auth, cursor);\n  }\n\n  /**\n   * Fetches profiles from Twitter.\n   * @param query The search query. Any Twitter-compatible query format can be used.\n   * @param maxProfiles The maximum number of profiles to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchSearchProfiles(\n    query: string,\n    maxProfiles: number,\n    cursor?: string,\n  ): Promise<QueryProfilesResponse> {\n    return fetchSearchProfiles(query, maxProfiles, this.auth, cursor);\n  }\n\n  /**\n   * Fetches list tweets from Twitter.\n   * @param listId The list id\n   * @param maxTweets The maximum number of tweets to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchListTweets(\n    listId: string,\n    maxTweets: number,\n    cursor?: string,\n  ): Promise<QueryTweetsResponse> {\n    return fetchListTweets(listId, maxTweets, cursor, this.auth);\n  }\n\n  /**\n   * Fetch the tweets a user has liked\n   * @param userId The user whose liked tweets should be returned\n   * @param maxTweets The maximum number of tweets to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchLikedTweets(\n    userId: string,\n    maxTweets: number,\n    cursor?: string,\n  ): Promise<QueryTweetsResponse> {\n    return fetchLikedTweets(userId, maxTweets, cursor, this.auth);\n  }\n\n  /**\n   * Fetch the profiles a user is following\n   * @param userId The user whose following should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @returns An {@link AsyncGenerator} of following profiles for the provided user.\n   */\n  public getFollowing(\n    userId: string,\n    maxProfiles: number,\n  ): AsyncGenerator<Profile, void> {\n    return getFollowing(userId, maxProfiles, this.auth);\n  }\n\n  /**\n   * Fetch the profiles that follow a user\n   * @param userId The user whose followers should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @returns An {@link AsyncGenerator} of profiles following the provided user.\n   */\n  public getFollowers(\n    userId: string,\n    maxProfiles: number,\n  ): AsyncGenerator<Profile, void> {\n    return getFollowers(userId, maxProfiles, this.auth);\n  }\n\n  /**\n   * Fetches following profiles from Twitter.\n   * @param userId The user whose following should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchProfileFollowing(\n    userId: string,\n    maxProfiles: number,\n    cursor?: string,\n  ): Promise<QueryProfilesResponse> {\n    return fetchProfileFollowing(userId, maxProfiles, this.auth, cursor);\n  }\n\n  /**\n   * Fetches profile followers from Twitter.\n   * @param userId The user whose following should be returned\n   * @param maxProfiles The maximum number of profiles to return.\n   * @param cursor The search cursor, which can be passed into further requests for more results.\n   * @returns A page of results, containing a cursor that can be used in further requests.\n   */\n  public fetchProfileFollowers(\n    userId: string,\n    maxProfiles: number,\n    cursor?: string,\n  ): Promise<QueryProfilesResponse> {\n    return fetchProfileFollowers(userId, maxProfiles, this.auth, cursor);\n  }\n\n  /**\n   * Fetches the current trends from Twitter.\n   * @returns The current list of trends.\n   */\n  public getTrends(): Promise<string[]> {\n    return getTrends(this.authTrends);\n  }\n\n  /**\n   * Fetches tweets from a Twitter user.\n   * @param user The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweets(user: string, maxTweets = 200): AsyncGenerator<Tweet> {\n    return getTweets(user, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches liked tweets from a Twitter user. Requires authentication.\n   * @param user The user whose likes should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of liked tweets from the provided user.\n   */\n  public getLikedTweets(user: string, maxTweets = 200): AsyncGenerator<Tweet> {\n    return getLikedTweets(user, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches tweets from a Twitter user using their ID.\n   * @param userId The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweetsByUserId(\n    userId: string,\n    maxTweets = 200,\n  ): AsyncGenerator<Tweet, void> {\n    return getTweetsByUserId(userId, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches tweets and replies from a Twitter user.\n   * @param user The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweetsAndReplies(\n    user: string,\n    maxTweets = 200,\n  ): AsyncGenerator<Tweet> {\n    return getTweetsAndReplies(user, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches tweets and replies from a Twitter user using their ID.\n   * @param userId The user whose tweets should be returned.\n   * @param maxTweets The maximum number of tweets to return. Defaults to `200`.\n   * @returns An {@link AsyncGenerator} of tweets from the provided user.\n   */\n  public getTweetsAndRepliesByUserId(\n    userId: string,\n    maxTweets = 200,\n  ): AsyncGenerator<Tweet, void> {\n    return getTweetsAndRepliesByUserId(userId, maxTweets, this.auth);\n  }\n\n  /**\n   * Fetches the first tweet matching the given query.\n   *\n   * Example:\n   * ```js\n   * const timeline = scraper.getTweets('user', 200);\n   * const retweet = await scraper.getTweetWhere(timeline, { isRetweet: true });\n   * ```\n   * @param tweets The {@link AsyncIterable} of tweets to search through.\n   * @param query A query to test **all** tweets against. This may be either an\n   * object of key/value pairs or a predicate. If this query is an object, all\n   * key/value pairs must match a {@link Tweet} for it to be returned. If this query\n   * is a predicate, it must resolve to `true` for a {@link Tweet} to be returned.\n   * - All keys are optional.\n   * - If specified, the key must be implemented by that of {@link Tweet}.\n   */\n  public getTweetWhere(\n    tweets: AsyncIterable<Tweet>,\n    query: TweetQuery,\n  ): Promise<Tweet | null> {\n    return getTweetWhere(tweets, query);\n  }\n\n  /**\n   * Fetches all tweets matching the given query.\n   *\n   * Example:\n   * ```js\n   * const timeline = scraper.getTweets('user', 200);\n   * const retweets = await scraper.getTweetsWhere(timeline, { isRetweet: true });\n   * ```\n   * @param tweets The {@link AsyncIterable} of tweets to search through.\n   * @param query A query to test **all** tweets against. This may be either an\n   * object of key/value pairs or a predicate. If this query is an object, all\n   * key/value pairs must match a {@link Tweet} for it to be returned. If this query\n   * is a predicate, it must resolve to `true` for a {@link Tweet} to be returned.\n   * - All keys are optional.\n   * - If specified, the key must be implemented by that of {@link Tweet}.\n   */\n  public getTweetsWhere(\n    tweets: AsyncIterable<Tweet>,\n    query: TweetQuery,\n  ): Promise<Tweet[]> {\n    return getTweetsWhere(tweets, query);\n  }\n\n  /**\n   * Fetches the most recent tweet from a Twitter user.\n   * @param user The user whose latest tweet should be returned.\n   * @param includeRetweets Whether or not to include retweets. Defaults to `false`.\n   * @returns The {@link Tweet} object or `null`/`undefined` if it couldn't be fetched.\n   */\n  public getLatestTweet(\n    user: string,\n    includeRetweets = false,\n    max = 200,\n  ): Promise<Tweet | null | void> {\n    return getLatestTweet(user, includeRetweets, max, this.auth);\n  }\n\n  /**\n   * Fetches a single tweet.\n   * @param id The ID of the tweet to fetch.\n   * @returns The {@link Tweet} object, or `null` if it couldn't be fetched.\n   */\n  public getTweet(id: string): Promise<Tweet | null> {\n    if (this.auth instanceof TwitterUserAuth) {\n      return getTweet(id, this.auth);\n    } else {\n      return getTweetAnonymous(id, this.auth);\n    }\n  }\n\n  /**\n   * Retrieves the direct message inbox for the authenticated user.\n   *\n   * @return A promise that resolves to an object representing the direct message inbox.\n   */\n  public getDmInbox(): Promise<DmInbox> {\n    return getDmInbox(this.auth);\n  }\n\n  /**\n   * Retrieves the direct message conversation for the specified conversation ID.\n   *\n   * @param conversationId - The unique identifier of the DM conversation to retrieve.\n   * @param cursor - Use `maxId` to get messages before a message ID (older messages), or `minId` to get messages after a message ID (newer messages).\n   * @return A promise that resolves to the timeline of the DM conversation.\n   */\n  public getDmConversation(\n    conversationId: string,\n    cursor?: DmCursorOptions,\n  ): Promise<DmConversationTimeline> {\n    return getDmConversation(conversationId, cursor, this.auth);\n  }\n\n  /**\n   * Retrieves direct messages from a specific conversation.\n   *\n   * @param conversationId - The unique identifier of the conversation to fetch messages from.\n   * @param [maxMessages=20] - The maximum number of messages to retrieve per request.\n   * @param cursor - Use `maxId` to get messages before a message ID (older messages), or `minId` to get messages after a message ID (newer messages).\n   * @returns An {@link AsyncGenerator} of messages from the provided conversation.\n   */\n  public getDmMessages(\n    conversationId: string,\n    maxMessages = 20,\n    cursor?: DmCursorOptions,\n  ): AsyncGenerator<DmMessageEntry, void> {\n    return getDmMessages(conversationId, maxMessages, cursor, this.auth);\n  }\n\n  /**\n   * Retrieves a list of direct message conversations for a specific user based on their user ID.\n   *\n   * @param inbox - The DM inbox containing all available conversations.\n   * @param userId - The unique identifier of the user whose DM conversations are to be retrieved.\n   * @return An array of DM conversations associated with the specified user ID.\n   */\n  public findDmConversationsByUserId(\n    inbox: DmInbox,\n    userId: string,\n  ): DmConversation[] {\n    return findDmConversationsByUserId(inbox, userId);\n  }\n\n  /**\n   * Returns if the scraper has a guest token. The token may not be valid.\n   * @returns `true` if the scraper has a guest token; otherwise `false`.\n   */\n  public hasGuestToken(): boolean {\n    return this.auth.hasToken() || this.authTrends.hasToken();\n  }\n\n  /**\n   * Returns if the scraper is logged in as a real user.\n   * @returns `true` if the scraper is logged in with a real user account; otherwise `false`.\n   */\n  public async isLoggedIn(): Promise<boolean> {\n    return (\n      (await this.auth.isLoggedIn()) && (await this.authTrends.isLoggedIn())\n    );\n  }\n\n  /**\n   * Login to Twitter as a real Twitter account. This enables running\n   * searches.\n   * @param username The username of the Twitter account to login with.\n   * @param password The password of the Twitter account to login with.\n   * @param email The email to log in with, if you have email confirmation enabled.\n   * @param twoFactorSecret The secret to generate two factor authentication tokens with, if you have two factor authentication enabled.\n   */\n  public async login(\n    username: string,\n    password: string,\n    email?: string,\n    twoFactorSecret?: string,\n  ): Promise<void> {\n    // Swap in a real authorizer for all requests\n    const userAuth = new TwitterUserAuth(this.token, this.getAuthOptions());\n    await userAuth.login(username, password, email, twoFactorSecret);\n    this.auth = userAuth;\n    this.authTrends = userAuth;\n  }\n\n  /**\n   * Log out of Twitter.\n   */\n  public async logout(): Promise<void> {\n    await this.auth.logout();\n    await this.authTrends.logout();\n\n    // Swap in guest authorizers for all requests\n    this.useGuestAuth();\n  }\n\n  /**\n   * Retrieves all cookies for the current session.\n   * @returns All cookies for the current session.\n   */\n  public async getCookies(): Promise<Cookie[]> {\n    return await this.authTrends\n      .cookieJar()\n      .getCookies(\n        typeof document !== 'undefined' ? document.location.toString() : twUrl,\n      );\n  }\n\n  /**\n   * Set cookies for the current session.\n   * @param cookies The cookies to set for the current session.\n   */\n  public async setCookies(cookies: (string | Cookie)[]): Promise<void> {\n    const userAuth = new TwitterUserAuth(this.token, this.getAuthOptions());\n    for (const cookie of cookies) {\n      await userAuth.cookieJar().setCookie(cookie, twUrl);\n    }\n\n    this.auth = userAuth;\n    this.authTrends = userAuth;\n  }\n\n  /**\n   * Clear all cookies for the current session.\n   */\n  public async clearCookies(): Promise<void> {\n    await this.auth.cookieJar().removeAllCookies();\n    await this.authTrends.cookieJar().removeAllCookies();\n  }\n\n  /**\n   * Sets the optional cookie to be used in requests.\n   * @param _cookie The cookie to be used in requests.\n   * @deprecated This function no longer represents any part of Twitter's auth flow.\n   * @returns This scraper instance.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public withCookie(_cookie: string): Scraper {\n    console.warn(\n      'Warning: Scraper#withCookie is deprecated and will be removed in a later version. Use Scraper#login or Scraper#setCookies instead.',\n    );\n    return this;\n  }\n\n  /**\n   * Sets the optional CSRF token to be used in requests.\n   * @param _token The CSRF token to be used in requests.\n   * @deprecated This function no longer represents any part of Twitter's auth flow.\n   * @returns This scraper instance.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public withXCsrfToken(_token: string): Scraper {\n    console.warn(\n      'Warning: Scraper#withXCsrfToken is deprecated and will be removed in a later version.',\n    );\n    return this;\n  }\n\n  private getAuthOptions(): Partial<TwitterAuthOptions> {\n    return {\n      fetch: this.options?.fetch,\n      transform: this.options?.transform,\n      rateLimitStrategy: this.options?.rateLimitStrategy,\n    };\n  }\n\n  private handleResponse<T>(res: RequestApiResult<T>): T {\n    if (!res.success) {\n      throw res.err;\n    }\n\n    return res.value;\n  }\n}\n"],"names":["log","jitter","endpoints","SearchMode","cursor"],"mappings":"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"}